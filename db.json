{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/sakamoto-logo1.jpg","path":"images/sakamoto-logo1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/sakamoto-logo2.jpg","path":"images/sakamoto-logo2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/sakamoto.png","path":"images/sakamoto.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/sakamoto-logo3.jpg","path":"images/sakamoto-logo3.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/404/index/sakamoto-404.gif","path":"404/index/sakamoto-404.gif","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"4ec29cbdbd29e9443a6f9c5d39c1df63a40cd60a","modified":1525143654826},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1525143654826},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1525143654826},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1525143654826},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1525143654768},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1525143654827},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1525143654827},{"_id":"themes/next/.gitmodules","hash":"8b14251a98e2a30038f3ba78b59be6ec2ca53538","modified":1525144153488},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1525143654827},{"_id":"themes/next/.jshintrc","hash":"ed3cce243df27e8d54fe1b8e6deb191136766333","modified":1525143654827},{"_id":"themes/next/.stickler.yml","hash":"affeba1c23ab0fe20b059d7ff1ff1ec67d0bc625","modified":1525143654827},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1525143654827},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1525143654828},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1525143654828},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1525143654828},{"_id":"themes/next/_config.yml","hash":"407d2d64b2e0c550a3bf9db94725b9bfb943c4de","modified":1525143654828},{"_id":"themes/next/bower.json","hash":"29515e8a97ae28e07a934e38d0fc79af695d14fc","modified":1525143654828},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1525143654828},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1525143654833},{"_id":"themes/next/package.json","hash":"d2eccdf5f241a3b42f2c9a873e3a063e54316ea9","modified":1525143654848},{"_id":"source/_posts/2018-04-30-Hexo-Travis-CI.md","hash":"a8894d1b5f5f063bbde94827da02c1bf37d922ea","modified":1525103839055},{"_id":"source/_posts/2018-04-01-Bresenham.md","hash":"1f4f1b41a4f97213bcd073aa5998599e0fb9095f","modified":1524981321997},{"_id":"source/404/index.md","hash":"89e5596e37383712caa6ba2db5d66a8fb4152963","modified":1524659079946},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1525143654826},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1525143654826},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1525143654826},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1525143654827},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1525143654827},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1525143654827},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1525143654829},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1525143654829},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1525143654829},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1525143654829},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1525143654830},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1525143654830},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1525143654830},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1525143654830},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1525143654830},{"_id":"themes/next/languages/de.yml","hash":"1bdc91fdd74f41c2432273e0f469e27613e79962","modified":1525143654833},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1525143654833},{"_id":"themes/next/languages/en.yml","hash":"527902104af2444106ddaa2c4f24309f9c103c6b","modified":1525143654833},{"_id":"themes/next/languages/fr.yml","hash":"52e8cfc1984e1fe8235f97983693fe4ef724d002","modified":1525143654833},{"_id":"themes/next/languages/id.yml","hash":"f457487bb96130b7efb7125275e2d26e106c9071","modified":1525143654833},{"_id":"themes/next/languages/it.yml","hash":"d16885be837e99d44c8c004b07b53ac78e443087","modified":1525143654833},{"_id":"themes/next/languages/ja.yml","hash":"567b2b57ffcbea409c897b74b41f82d3bd35d7ac","modified":1525143654833},{"_id":"themes/next/languages/ko.yml","hash":"65aea531d1e2cbb79d15cec8c4f5c3d615a11fa6","modified":1525143654834},{"_id":"themes/next/languages/nl.yml","hash":"446dd4bc56efbb8bf0b8e7acf1a077b3e7643edf","modified":1525143654834},{"_id":"themes/next/languages/pt-BR.yml","hash":"2ef3d965569d727047b310a2c5dfff15cbc4d653","modified":1525143654834},{"_id":"themes/next/languages/pt.yml","hash":"b50964d3fbee2a2f83be7a2842333556bc971839","modified":1525143654834},{"_id":"themes/next/languages/ru.yml","hash":"056da24924342926cbb7f3cab123e3a116a855e7","modified":1525143654834},{"_id":"themes/next/languages/tr.yml","hash":"0664fe016b30be41e6f73e4fc5171d748df09269","modified":1525143654834},{"_id":"themes/next/languages/vi.yml","hash":"d305b5f55aeffc879ca3405cbe660a00f1914255","modified":1525143654834},{"_id":"themes/next/languages/zh-CN.yml","hash":"65f9b33eaef2f99944c16d84d44fd9a3027af762","modified":1525143654834},{"_id":"themes/next/languages/zh-HK.yml","hash":"4323f8b8ed7a52b6bb0dc938acf58b15eab85abc","modified":1525143654835},{"_id":"themes/next/languages/zh-TW.yml","hash":"69455c196d0d06b717b614ba4d49d1980d251429","modified":1525143654835},{"_id":"themes/next/layout/_layout.swig","hash":"541c4e65b52e6e5fdd164791267275b2e22de57b","modified":1525143654835},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1525143654847},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1525143654847},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1525143654847},{"_id":"themes/next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1525143654847},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1525143654847},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1525143654847},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1525143654847},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1525143654848},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1525143654848},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1525143654848},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1525143654876},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1525143654876},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1525143654876},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages.md","hash":"66c90b144507225ec1a16565b5e5e06b94d41125","modified":1524980566667},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT.md","hash":"b2f0956d4a24d7541b47d37e10e67cd315ce7297","modified":1525009494999},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau.md","hash":"d48e91e90890f34e405146bf29e3a8b128d3da1f","modified":1524981886724},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654865},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/修改部署配置.png","hash":"690d769821b5fc8d9f0ead488161b26d8602bc61","modified":1523854243246},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/创建仓库.png","hash":"e0a84922c44b8c42b03fe2797e19ca133c0c5d49","modified":1523694197654},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/Git右键菜单.png","hash":"b07c794928600c5a8c70bbeb1af7cfeb7cec069c","modified":1523677009656},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/Git安装.png","hash":"92ae278264db5dd623a7b26ae75fc5fa50841199","modified":1523676748258},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Git安装.png","hash":"b84f51b6c3f16a2c54eb6ea99201d3ed325fc8a9","modified":1523677675754},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Hexo安装.png","hash":"4771eacf40ddfec56626ec3ddca623c0a4161c10","modified":1523686008649},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Node.js环境配置与npm安装.png","hash":"ce727e3e66c0b3e1d57d2f2fd420f2091d508c1e","modified":1523675930685},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/为文章默认文件名加上日期前缀.png","hash":"021c6619a160f4d179b16a0c086080271d586b3d","modified":1524487972019},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/侧边栏.png","hash":"724529151c6e01876c3d25f39f5f6b03ce922d26","modified":1524643671183},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/文章阅读进度条.png","hash":"e5a64fc0aaa5350e83a9ac89287ac31d571c7a0b","modified":1524644243159},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/注意区分站点配置和主题配置.png","hash":"bf758578b893ff3db74c8638528b2e73b53929ba","modified":1524535896637},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/网站图标.png","hash":"845ae1170615ecb50eacaf0c07ffb1e5e8b5eb98","modified":1524542971109},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/网站页脚.png","hash":"f312b5c92931aeba47cf21a7babf967cdb429aaf","modified":1524542857457},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/deCasteljau金字塔.png","hash":"7b3504a44e1cdae390f29d07d81a6b18216f37c9","modified":1524927094862},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/decasteljau_john.pdf","hash":"490fc418ac8085b9d16aa7c56f586800594651c7","modified":1524929014085},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/线性曲线.gif","hash":"5b787086c6d9cef63d06c0590dcd2eb001c40ac2","modified":1524916343091},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1525143654830},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1525143654831},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1525143654831},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1525143654831},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1525143654831},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1525143654831},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1525143654832},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1525143654832},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1525143654835},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1525143654835},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1525143654835},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1525143654836},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1525143654836},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1525143654836},{"_id":"themes/next/layout/_macro/post.swig","hash":"d231ae3e9663af04042676506ad44619f4b52c68","modified":1525143654836},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1525143654837},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1525143654837},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1525143654837},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1525143654837},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1525143654837},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2d7209b15377fa1dac9ac5f759aa6b0506021789","modified":1525143654837},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1525143654838},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1525143654839},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1525143654840},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1525143654840},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1525143654840},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1525143654841},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1525143654843},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"08cbad4bb66196f2597682ca793e8c9f24b35c31","modified":1525143654844},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1525143654844},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1525143654844},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1525143654845},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1525143654845},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1525143654845},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1525143654845},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1525143654846},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1525143654848},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1525143654849},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1525143654849},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1525143654849},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1525143654849},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1525143654849},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1525143654849},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1525143654849},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1525143654849},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1525143654850},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1525143654865},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1525143654866},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1525143654866},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525143654866},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1525143654866},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1525143654866},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1525143654866},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1525143654866},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1525143654867},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1525143654867},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1525143654867},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1525143654867},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1525143654867},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525143654867},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1525143654867},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1525143654868},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525143654867},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1525143654868},{"_id":"themes/next/source/images/sakamoto-logo1.jpg","hash":"0146408bfccc4caed9c1bc32c86f197db31f3109","modified":1488895758557},{"_id":"themes/next/source/images/sakamoto-logo2.jpg","hash":"e7150145eb22400167c04208135edc47f6ab5f91","modified":1495443488835},{"_id":"themes/next/source/images/sakamoto.png","hash":"6ba6b62ff839e2b1635e2b24160e71ab75f4067e","modified":1524294651719},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525143654868},{"_id":"source/_posts/2018-04-01-Bresenham/简单版本的Bresenham直线算法效果图.png","hash":"df888072f67bafcce8965d71f8f9c8c710515349","modified":1524129976364},{"_id":"source/_posts/2018-04-01-Bresenham/推广后的Bresenham直线算法效果图.png","hash":"a2c5fb3b49a3883817611799ed9de5eb43cc38c3","modified":1524129976364},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/文章末尾.png","hash":"4298b713a9df215ddce525f77189fb47a6a6a7c9","modified":1524641814136},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/二次曲线.gif","hash":"361322e399edeee0c053309c04c146ccaae6be7c","modified":1524916324686},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/三次曲线.gif","hash":"cc2bfd1dd7e1d41da63b89fccb9a4e25050c2724","modified":1524916367504},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/示例图片.jpg","hash":"329b3bde11901b4e73f9149ac9532d14901754b9","modified":1391836423819},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654841},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654841},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654860},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654860},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654861},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654865},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525143654865},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/四次曲线.gif","hash":"622ca6209e6020dceb820c7e814785a3b94fe428","modified":1524916379232},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1525143654836},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1525143654836},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1525143654837},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1525143654838},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1525143654838},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"b5c9f191c55622d778a1f4fb14008f858b87e8f7","modified":1525143654838},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e76745ff68fc017c250d749880ab67a68a9f2695","modified":1525143654838},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1525143654838},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1525143654838},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1525143654839},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1525143654839},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1525143654839},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1525143654839},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1525143654839},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1525143654839},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1525143654840},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1525143654840},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1525143654840},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1525143654840},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1525143654841},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1525143654841},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1525143654842},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1525143654843},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1525143654843},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1525143654843},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1525143654843},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/创建博客.png","hash":"aae18b4d9c050e45ff7926f1164074e4e679affe","modified":1523687521180},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1525143654843},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1525143654843},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1525143654843},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1525143654844},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1525143654844},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1525143654844},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1525143654844},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1525143654844},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1525143654845},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1525143654845},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1525143654845},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1525143654846},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1525143654846},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1525143654846},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1525143654846},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1525143654860},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1525143654860},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1525143654861},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1525143654861},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1525143654865},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1525143654865},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1525143654865},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1525143654865},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525143654868},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1525143654868},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525143654868},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525143654869},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1525143654869},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525143654869},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1525143654869},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525143654869},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525143654869},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1525143654870},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1525143654870},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1525143654870},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1525143654870},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1525143654870},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1525143654870},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1525144038495},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1525144038495},{"_id":"themes/next/source/lib/reading_progress/.git","hash":"d1a2dbb9c75f0276ed4f37123149de18c3e75cc1","modified":1525144038434},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1525144038495},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1525144038496},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1525144038496},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1525144038496},{"_id":"themes/next/source/lib/three/.git","hash":"cf1340048f8759fac6cad6d8effe5ba822f15192","modified":1525144153237},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1525144038496},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1525144153305},{"_id":"themes/next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1525144153305},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1525144153305},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1525144153307},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1525144153306},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525143654876},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525143654876},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525143654876},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/五次曲线.gif","hash":"13816db4443a92e0fd52a9424c38690c4dbc4699","modified":1524916397022},{"_id":"themes/next/source/images/sakamoto-logo3.jpg","hash":"616df349fc6f3ad705a34b296ac18481f93d5499","modified":1488526033439},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525143654874},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/预览博客.png","hash":"c0545fddb06c67f6f674ec4137cbbb74a9afc4d3","modified":1523688331369},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/部署博客.png","hash":"5fffb35094673f5b6a5f2cc98f9313e7f0ed6d45","modified":1523694413688},{"_id":"source/404/index/sakamoto-404.gif","hash":"705c19e1cab71b76e6ea05237126f6726cfa789e","modified":1495443987847},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1525143654846},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1525143654846},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1525143654850},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1525143654850},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1525143654850},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1525143654850},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1525143654856},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1525143654859},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1525143654859},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1525143654859},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1525143654860},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1525143654860},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1525143654860},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1525143654860},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1525143654861},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1525143654861},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1525143654861},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1525143654863},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1525143654863},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1525143654863},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1525143654863},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1525143654863},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1525143654864},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1525143654864},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1525143654869},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525143654871},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1525143654871},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525143654871},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525143654874},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525143654874},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525143654873},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525143654873},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525143654875},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1525143654851},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1525143654852},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1525143654853},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1525143654854},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1525143654855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1525143654856},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1525143654857},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1525143654858},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1525143654859},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1525143654862},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1525143654863},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525143654872},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1525144153311},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/deCasteljau剖分过程.gif","hash":"e938f4933b75be36f415fcc68cf133da5e0e49d3","modified":1524890903829}],"Category":[],"Data":[],"Page":[{"title":"404 Not Found","date":"2018-04-21T05:51:57.000Z","_content":"\n![404 Not Found](/404/index/sakamoto-404.gif \"404 Not Found\")","source":"404/index.md","raw":"---\ntitle: 404 Not Found\ndate: 2018-04-21 13:51:57\npermalink: /404\n---\n\n![404 Not Found](/404/index/sakamoto-404.gif \"404 Not Found\")","updated":"2018-04-25T12:24:39.946Z","path":"/404.html","comments":1,"layout":"page","_id":"cjgn3ozw40001acfi7em8c9ba","content":"<p><img src=\"/404/index/sakamoto-404.gif\" alt=\"404 Not Found\" title=\"404 Not Found\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/404/index/sakamoto-404.gif\" alt=\"404 Not Found\" title=\"404 Not Found\"></p>\n"}],"Post":[{"title":"Hexo博客的版本控制与Travis CI持续集成","date":"2018-04-30T15:36:40.000Z","description":"<center>使用Travis CI实现Hexo博客版本控制与自动部署</center>","_content":"\n# 流程很重要\n\n之前写博客搭建的时候, 思路就不是很清晰, 一直以来也有一个最大的疑问, 那就是:\n\n<center>本地跟云端到底都存了些啥?</center>\n\n- 本地是完整的博客实例, 里面有我们写的md格式的文章, 有文章引用的资源比如图片, 还有我们对博客以及主题的各种配置文件.\n- 云端的GitHub Pages对应的是个人主页专用版本库(repository), 默认的唯一分支master里面是托管的静态网站文件, html的, css的, 最终上线的博客就是由这些文件所构成.\n\n按照之前搭建的流程, 我们在本地目录创建一个Hexo框架的博客实例, 然后进行配置与写作, 本地预览调试觉得没问题可以上线博客了, 再将博客生成静态网站文件并部署到GitHub的repo上. 不出意外的话, 很快就能看到网站已经可以访问了.\n\n用了半个月发现这个流程确实有问题, 这就涉及到Git的本质----版本控制. 通过每次commit及其message, 我们可以看到博客的变迁过程, 也可以在出了错误的时候吃一吃后悔药, 这些都是版本控制的效果.\n\n我想那肯定要好好利用啊, 正好学习学习Git以及GitHub的基本操作.\n\n结果我更迷茫了. 每次对博客做了改动, 小心翼翼的`hexo d -g -m \"这是俺的更新说明blabla\"`, 然后在repo的commits记录里查看时, 却发现在文件上根本看不到自己的改动, 出现在眼前的是经由hexo渲染生成的html和css, 我也看不懂啊, 这就好比我写了C的代码, 提交上去之后想看看代码变化, 却发现全是汇编甚至机器码, 这就很尴尬.","source":"_posts/2018-04-30-Hexo-Travis-CI.md","raw":"---\ntitle: Hexo博客的版本控制与Travis CI持续集成\ndate: 2018-04-30 23:36:40\ntags: Hexo\ndescription: <center>使用Travis CI实现Hexo博客版本控制与自动部署</center>\n---\n\n# 流程很重要\n\n之前写博客搭建的时候, 思路就不是很清晰, 一直以来也有一个最大的疑问, 那就是:\n\n<center>本地跟云端到底都存了些啥?</center>\n\n- 本地是完整的博客实例, 里面有我们写的md格式的文章, 有文章引用的资源比如图片, 还有我们对博客以及主题的各种配置文件.\n- 云端的GitHub Pages对应的是个人主页专用版本库(repository), 默认的唯一分支master里面是托管的静态网站文件, html的, css的, 最终上线的博客就是由这些文件所构成.\n\n按照之前搭建的流程, 我们在本地目录创建一个Hexo框架的博客实例, 然后进行配置与写作, 本地预览调试觉得没问题可以上线博客了, 再将博客生成静态网站文件并部署到GitHub的repo上. 不出意外的话, 很快就能看到网站已经可以访问了.\n\n用了半个月发现这个流程确实有问题, 这就涉及到Git的本质----版本控制. 通过每次commit及其message, 我们可以看到博客的变迁过程, 也可以在出了错误的时候吃一吃后悔药, 这些都是版本控制的效果.\n\n我想那肯定要好好利用啊, 正好学习学习Git以及GitHub的基本操作.\n\n结果我更迷茫了. 每次对博客做了改动, 小心翼翼的`hexo d -g -m \"这是俺的更新说明blabla\"`, 然后在repo的commits记录里查看时, 却发现在文件上根本看不到自己的改动, 出现在眼前的是经由hexo渲染生成的html和css, 我也看不懂啊, 这就好比我写了C的代码, 提交上去之后想看看代码变化, 却发现全是汇编甚至机器码, 这就很尴尬.","slug":"Hexo-Travis-CI","published":1,"updated":"2018-04-30T15:57:19.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgn3ozvx0000acfirtxhtf3v","content":"<h1 id=\"流程很重要\"><a href=\"#流程很重要\" class=\"headerlink\" title=\"流程很重要\"></a>流程很重要</h1><p>之前写博客搭建的时候, 思路就不是很清晰, 一直以来也有一个最大的疑问, 那就是:</p>\n<center>本地跟云端到底都存了些啥?</center>\n\n<ul>\n<li>本地是完整的博客实例, 里面有我们写的md格式的文章, 有文章引用的资源比如图片, 还有我们对博客以及主题的各种配置文件.</li>\n<li>云端的GitHub Pages对应的是个人主页专用版本库(repository), 默认的唯一分支master里面是托管的静态网站文件, html的, css的, 最终上线的博客就是由这些文件所构成.</li>\n</ul>\n<p>按照之前搭建的流程, 我们在本地目录创建一个Hexo框架的博客实例, 然后进行配置与写作, 本地预览调试觉得没问题可以上线博客了, 再将博客生成静态网站文件并部署到GitHub的repo上. 不出意外的话, 很快就能看到网站已经可以访问了.</p>\n<p>用了半个月发现这个流程确实有问题, 这就涉及到Git的本质----版本控制. 通过每次commit及其message, 我们可以看到博客的变迁过程, 也可以在出了错误的时候吃一吃后悔药, 这些都是版本控制的效果.</p>\n<p>我想那肯定要好好利用啊, 正好学习学习Git以及GitHub的基本操作.</p>\n<p>结果我更迷茫了. 每次对博客做了改动, 小心翼翼的<code>hexo d -g -m &quot;这是俺的更新说明blabla&quot;</code>, 然后在repo的commits记录里查看时, 却发现在文件上根本看不到自己的改动, 出现在眼前的是经由hexo渲染生成的html和css, 我也看不懂啊, 这就好比我写了C的代码, 提交上去之后想看看代码变化, 却发现全是汇编甚至机器码, 这就很尴尬.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"流程很重要\"><a href=\"#流程很重要\" class=\"headerlink\" title=\"流程很重要\"></a>流程很重要</h1><p>之前写博客搭建的时候, 思路就不是很清晰, 一直以来也有一个最大的疑问, 那就是:</p>\n<center>本地跟云端到底都存了些啥?</center>\n\n<ul>\n<li>本地是完整的博客实例, 里面有我们写的md格式的文章, 有文章引用的资源比如图片, 还有我们对博客以及主题的各种配置文件.</li>\n<li>云端的GitHub Pages对应的是个人主页专用版本库(repository), 默认的唯一分支master里面是托管的静态网站文件, html的, css的, 最终上线的博客就是由这些文件所构成.</li>\n</ul>\n<p>按照之前搭建的流程, 我们在本地目录创建一个Hexo框架的博客实例, 然后进行配置与写作, 本地预览调试觉得没问题可以上线博客了, 再将博客生成静态网站文件并部署到GitHub的repo上. 不出意外的话, 很快就能看到网站已经可以访问了.</p>\n<p>用了半个月发现这个流程确实有问题, 这就涉及到Git的本质----版本控制. 通过每次commit及其message, 我们可以看到博客的变迁过程, 也可以在出了错误的时候吃一吃后悔药, 这些都是版本控制的效果.</p>\n<p>我想那肯定要好好利用啊, 正好学习学习Git以及GitHub的基本操作.</p>\n<p>结果我更迷茫了. 每次对博客做了改动, 小心翼翼的<code>hexo d -g -m &quot;这是俺的更新说明blabla&quot;</code>, 然后在repo的commits记录里查看时, 却发现在文件上根本看不到自己的改动, 出现在眼前的是经由hexo渲染生成的html和css, 我也看不懂啊, 这就好比我写了C的代码, 提交上去之后想看看代码变化, 却发现全是汇编甚至机器码, 这就很尴尬.</p>\n"},{"title":"OpenGL中Bresenham直线算法及其决策参数(decision parameter)","date":"2018-03-31T16:00:00.000Z","updated":"2018-04-18T16:00:00.000Z","_content":"## 简单版本\n\n[教材](https://book.douban.com/subject/3629471/)P17简单版本的Bresenham直线算法的C++代码如下:\n\n```cpp\n/*简单版本的Bresenham算法核心代码*/\nvoid bresenhamLineOriginal(int x0, int y0, int x1, int y1)\n{\n\tint x = x0, dx = (x1 - x0);\n\tint y = y0, dy = (y1 - y0);\n\tfor (float k = (float)dy / dx, e = -0.5; x < x1; ++x)\n\t{\n\t\tglVertex2i(x, y);\n\t\te = e + k;\n\t\tif (e >= 0) { ++y; --e; }\n\t}\n}\n```\n<!-- more -->\n\n测试数据及效果图如下:\n![简单版本的Bresenham直线算法效果图](简单版本的Bresenham直线算法效果图.png \"简单版本的Bresenham直线算法\")\n\n## 推广算法\n从上图及其测试数据可以看出, 简单形式的Bresenham直线算法仅支持斜率区间为`[0,1]`的直线, 而且还有`x0 <= x2`这样一个隐含条件.\n如何推广到任意直线, 下面简单说一下:\n\n- 去掉`x0 <= x2`隐含条件, 只需要将横坐标的原步长`1`加上`x1-x0`的符号即可;\n- 把斜率区间`[0,1]`推广到`[-1,1]` 只需要将纵坐标的原步长`1`加上`y1-y0`的符号即可;\n- 把斜率区间从`[-1,1]`推广到任意, 只需要在斜率绝对值大于`1`时变换横纵坐标轴即可.\n\n代码如下:\n\n```cpp\n#include<GL\\GLUT.H>\n\n/*求绝对值*/\ninline int abs(int a) { return (a < 0 ? -a : a); }\n\n/*取符号, 正为1, 负为-1, 零为0*/\ninline int sign(int a) { return ((a > 0) ? 1 : (a < 0 ? -1 : 0)); }\n\n/*交换数值*/\ninline void swap(int &a, int &b) { int temp = a; a = b; b = temp; }\n\n/*Bresenham画线, 起点为(x0,y0), 终点为(x1,y1)*/\nvoid BresenhamLine(int x0, int y0, int x1, int y1)\n{\n\tenum { X, Y, XY };//枚举0, 1, 2, 提高可读性\n\n\t/*XY坐标距离distance, 用于更新决策参数dp*/\n\tint d[XY] = { abs(x1 - x0),abs(y1 - y0) };\n\n\t/*XY坐标差符号sign, 用于更新坐标光标cur*/\n\tint s[XY] = { sign(x1 - x0),sign(y1 - y0) };\n\n\t/*考虑是否变换坐标轴, 以处理斜率绝对值大于1的直线*/\n\tbool flag = (d[X] < d[Y]);//斜率绝对值大于1则需要变换\n\tif (flag) swap(d[X], d[Y]);//需要变换则交换XY轴坐标距离\n\n\tint cur[XY] = { x0,y0 };//cursor, 坐标光标, 初始化为起点\n\tint dp = 2 * d[Y] - d[X];//decision parameter, 决策参数\n\tfor (int i = 0; i <= d[X]; ++i)//光标遍历, 逐个画点\n\t{\n\t\tglVertex2i(cur[X], cur[Y]);\n\t\tif (dp >= 0)//判断决策参数\n\t\t{\n\t\t\tcur[!flag] += s[!flag];//更新纵坐标(若未变换)\n\t\t\tdp -= 2 * d[X];//修正决策参数\n\t\t}\n\t\tcur[flag] += s[flag];//更新横坐标(若未变换)\n\t\tdp += 2 * d[Y];//更新决策参数\n\t}\n}\n\nvoid display()\n{\n\tglClearColor(1.0, 1.0, 1.0, 0.0);//白色背景\n\tglClear(GL_COLOR_BUFFER_BIT);//填充背景色\n\tglColor3f(0.0, 1.0, 1.0);//蓝绿色笔画\n\tglPointSize(5.0f);//笔画粗细5\n\tglBegin(GL_POINTS);//开始绘制\n\n\tBresenhamLine(64, 128, 64, 128);//点\n\n\tBresenhamLine(000, 000, 000, 500);//k不存在\n\tBresenhamLine(250, 000, 250, 500);//k不存在\n\tBresenhamLine(500, 000, 500, 500);//k不存在\n\tBresenhamLine(000, 000, 500, 000);//k=0\n\tBresenhamLine(000, 250, 500, 250);//k=0\n\tBresenhamLine(000, 500, 500, 500);//k=0\n\tBresenhamLine(000, 000, 500, 250);//k=0.5\n\tBresenhamLine(000, 250, 500, 500);//k=0.5\n\tBresenhamLine(000, 000, 500, 500);//k=1\n\tBresenhamLine(000, 250, 500, 000);//k=-0.5\t\n\tBresenhamLine(000, 500, 500, 250);//k=-0.5\n\tBresenhamLine(000, 500, 500, 000);//k=-1\n\n\tglEnd();//结束绘制\n\tglFlush();\n}\n\nint main(int argc, char **argv)\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);\n\tglutInitWindowPosition(200, 200);\n\tglutInitWindowSize(500, 500);\n\tglutCreateWindow(argv[0]);\n\tglutDisplayFunc(display);\n\tgluOrtho2D(0.0, 500.0, 0.0, 500.0);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n测试数据及效果图如下:\n![推广后的Bresenham直线算法效果图](推广后的Bresenham直线算法效果图.png \"推广后的Bresenham直线算法\")\n## 决策参数\n但是从简单到复杂的过程中还有一个变化是我不太理解的, 那就是决策参数`dp`(也就是原代码中的`e`). 初始值从`-0.5`改为`2 * d[Y] - d[X]`, 步长从斜率`k`改为`2 * d[Y]`, 大于零时的修正值从`-1`改为`2 * d[X]`. 这是为什么呢.\n\n------\n以下是解答部分: \n[opengl - Bresenham line algorithm - where does the decision parameter come from? - Stack Overflow](https://stackoverflow.com/questions/19188319/Bresenham-line-algorithm-where-does-the-decision-parameter-come-from)\n以下是原答案的个人翻译:\nBresenham算法只进行整数运算. 主要思想在于尽量减少直线方程增量估值的计算. \n该算法非常简单. 我们从直线方程入手: \n`f(x) = y = a*x +b`\n(目前假设`0 <= a < 1`). 当我们向右移一个像素时, 我们得到: \n`f(x+1) = a * (x+1) + b = f(x) + a`\n但是对于一般的直线来讲, `a`和`y`都不会是整数.  所以我们不妨引入一个\"误差\". 我们一直沿x轴向右移动.  在这个过程中, 我们初始化误差`e`为`a`并以`a`步进, 用于决定每右移一个像素后, 是否要上移一个像素.  如果我们的误差高于0.5个像素(条件), 那就沿y轴上移一个像素, 此后再将误差值减小1个像素(修正值). 代码如下:  \n```cpp\nfloat e=a;\nfloat y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > 0.5) {\n        y++;\n        e=e+a-1;\n    }\n    else {\n        e=e+a;\n    }\n}\n```\n(请注意, 我们将误差`e`初始化为`a`而不是`0`, 因为我们在绘制像素之后才做出决定, 并且在绘制第一个像素之前并不需要检验`e > 0.5`这一条件, 因为起点总是恰好在直线上.)\n现在, 我们已经更进一步了. 但仍有两点有悖于整数运算: `0.5`, 还有`a`(也就是`dy/dx`).  但是: 我们能够以任意比例缩放误差的步长(还有条件), 且并不会影响结果.  想想看: 目前为止我们以1像素为单位修正误差(因为起初这很直观), 但是这个算法可以使用任意值来修正误差——半个像素, 两个像素, π个像素. \n因此, 我们只需将初始值及步长`a`缩放为`2*dy`, 条件`0.5`缩放为`dx`, 修正值1缩放为`2*dx`即可摆脱上面的两个分数! (从某种意义上说, 此处的关键在于我们使用的不是算法中的常数, 而是直线的导出函数). 代码如下: \n```cpp\nint e=2*dy;\nint y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > dx) {\n        y++;\n        e=e+2*dy - 2*dx;\n    }\n    else {\n        e=e+2*dy;\n    }\n}\n```\n现在, 我们的目的达成了: 只有整数参与运算. (这里需要注意的一点是: 从`float`改用`int`的同时, 直线的端点自动折合成了整数坐标----整数端点是Bresenham算法的先决条件, 同时也是其局限性). \n此外, 还有一个缺陷: 条件含有变量. 如果以一个常量作为条件进行对比, 计算会更加高效, 而最理想的条件是常量0, 因为依赖符号/零标志的判断分支节省了比较操作.  我们可以通过改变误差的修正值来实现这一点. 同理, 不仅修正值的缩放比例可以任意选择, 误差的初始值也可以. 下面我们来看看如何修改初始值以使条件变为常量0: \n我们的条件目前是`e > dx`, 因此将误差初始值偏移`-dx`将使我们能够对`0`进行比较(现在`0`表示`dx`之前的含义, 即0.5像素). 这个偏移只会影响`e`的初始值和条件, 并且条件中所有的步长都和以前一样: \n```cpp\nint e=2*dy-dx;\nint y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > 0) {\n        y++;\n        e=e+2*dy - 2*dx;\n    }\n    else {\n        e=e+2*dy;\n    }\n}\n```\n看, `2*dy-dx`这样出现了 ;)\n\n------\n\n## 参考\n\n测试数据参考: https://blog.csdn.net/demonliuhui/article/details/52985949\n\n推广算法参考: [Generalized Bresenham's Line Drawing Algorithm using OpenGL](http://code-blocks.blogspot.hk/2014/12/generalized-bresenhams-line-drawing.html)","source":"_posts/2018-04-01-Bresenham.md","raw":"---\ntitle: OpenGL中Bresenham直线算法及其决策参数(decision parameter)\ndate: 2018-04-01\nupdated: 2018-04-19\ntags: OpenGL\n---\n## 简单版本\n\n[教材](https://book.douban.com/subject/3629471/)P17简单版本的Bresenham直线算法的C++代码如下:\n\n```cpp\n/*简单版本的Bresenham算法核心代码*/\nvoid bresenhamLineOriginal(int x0, int y0, int x1, int y1)\n{\n\tint x = x0, dx = (x1 - x0);\n\tint y = y0, dy = (y1 - y0);\n\tfor (float k = (float)dy / dx, e = -0.5; x < x1; ++x)\n\t{\n\t\tglVertex2i(x, y);\n\t\te = e + k;\n\t\tif (e >= 0) { ++y; --e; }\n\t}\n}\n```\n<!-- more -->\n\n测试数据及效果图如下:\n![简单版本的Bresenham直线算法效果图](简单版本的Bresenham直线算法效果图.png \"简单版本的Bresenham直线算法\")\n\n## 推广算法\n从上图及其测试数据可以看出, 简单形式的Bresenham直线算法仅支持斜率区间为`[0,1]`的直线, 而且还有`x0 <= x2`这样一个隐含条件.\n如何推广到任意直线, 下面简单说一下:\n\n- 去掉`x0 <= x2`隐含条件, 只需要将横坐标的原步长`1`加上`x1-x0`的符号即可;\n- 把斜率区间`[0,1]`推广到`[-1,1]` 只需要将纵坐标的原步长`1`加上`y1-y0`的符号即可;\n- 把斜率区间从`[-1,1]`推广到任意, 只需要在斜率绝对值大于`1`时变换横纵坐标轴即可.\n\n代码如下:\n\n```cpp\n#include<GL\\GLUT.H>\n\n/*求绝对值*/\ninline int abs(int a) { return (a < 0 ? -a : a); }\n\n/*取符号, 正为1, 负为-1, 零为0*/\ninline int sign(int a) { return ((a > 0) ? 1 : (a < 0 ? -1 : 0)); }\n\n/*交换数值*/\ninline void swap(int &a, int &b) { int temp = a; a = b; b = temp; }\n\n/*Bresenham画线, 起点为(x0,y0), 终点为(x1,y1)*/\nvoid BresenhamLine(int x0, int y0, int x1, int y1)\n{\n\tenum { X, Y, XY };//枚举0, 1, 2, 提高可读性\n\n\t/*XY坐标距离distance, 用于更新决策参数dp*/\n\tint d[XY] = { abs(x1 - x0),abs(y1 - y0) };\n\n\t/*XY坐标差符号sign, 用于更新坐标光标cur*/\n\tint s[XY] = { sign(x1 - x0),sign(y1 - y0) };\n\n\t/*考虑是否变换坐标轴, 以处理斜率绝对值大于1的直线*/\n\tbool flag = (d[X] < d[Y]);//斜率绝对值大于1则需要变换\n\tif (flag) swap(d[X], d[Y]);//需要变换则交换XY轴坐标距离\n\n\tint cur[XY] = { x0,y0 };//cursor, 坐标光标, 初始化为起点\n\tint dp = 2 * d[Y] - d[X];//decision parameter, 决策参数\n\tfor (int i = 0; i <= d[X]; ++i)//光标遍历, 逐个画点\n\t{\n\t\tglVertex2i(cur[X], cur[Y]);\n\t\tif (dp >= 0)//判断决策参数\n\t\t{\n\t\t\tcur[!flag] += s[!flag];//更新纵坐标(若未变换)\n\t\t\tdp -= 2 * d[X];//修正决策参数\n\t\t}\n\t\tcur[flag] += s[flag];//更新横坐标(若未变换)\n\t\tdp += 2 * d[Y];//更新决策参数\n\t}\n}\n\nvoid display()\n{\n\tglClearColor(1.0, 1.0, 1.0, 0.0);//白色背景\n\tglClear(GL_COLOR_BUFFER_BIT);//填充背景色\n\tglColor3f(0.0, 1.0, 1.0);//蓝绿色笔画\n\tglPointSize(5.0f);//笔画粗细5\n\tglBegin(GL_POINTS);//开始绘制\n\n\tBresenhamLine(64, 128, 64, 128);//点\n\n\tBresenhamLine(000, 000, 000, 500);//k不存在\n\tBresenhamLine(250, 000, 250, 500);//k不存在\n\tBresenhamLine(500, 000, 500, 500);//k不存在\n\tBresenhamLine(000, 000, 500, 000);//k=0\n\tBresenhamLine(000, 250, 500, 250);//k=0\n\tBresenhamLine(000, 500, 500, 500);//k=0\n\tBresenhamLine(000, 000, 500, 250);//k=0.5\n\tBresenhamLine(000, 250, 500, 500);//k=0.5\n\tBresenhamLine(000, 000, 500, 500);//k=1\n\tBresenhamLine(000, 250, 500, 000);//k=-0.5\t\n\tBresenhamLine(000, 500, 500, 250);//k=-0.5\n\tBresenhamLine(000, 500, 500, 000);//k=-1\n\n\tglEnd();//结束绘制\n\tglFlush();\n}\n\nint main(int argc, char **argv)\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);\n\tglutInitWindowPosition(200, 200);\n\tglutInitWindowSize(500, 500);\n\tglutCreateWindow(argv[0]);\n\tglutDisplayFunc(display);\n\tgluOrtho2D(0.0, 500.0, 0.0, 500.0);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n测试数据及效果图如下:\n![推广后的Bresenham直线算法效果图](推广后的Bresenham直线算法效果图.png \"推广后的Bresenham直线算法\")\n## 决策参数\n但是从简单到复杂的过程中还有一个变化是我不太理解的, 那就是决策参数`dp`(也就是原代码中的`e`). 初始值从`-0.5`改为`2 * d[Y] - d[X]`, 步长从斜率`k`改为`2 * d[Y]`, 大于零时的修正值从`-1`改为`2 * d[X]`. 这是为什么呢.\n\n------\n以下是解答部分: \n[opengl - Bresenham line algorithm - where does the decision parameter come from? - Stack Overflow](https://stackoverflow.com/questions/19188319/Bresenham-line-algorithm-where-does-the-decision-parameter-come-from)\n以下是原答案的个人翻译:\nBresenham算法只进行整数运算. 主要思想在于尽量减少直线方程增量估值的计算. \n该算法非常简单. 我们从直线方程入手: \n`f(x) = y = a*x +b`\n(目前假设`0 <= a < 1`). 当我们向右移一个像素时, 我们得到: \n`f(x+1) = a * (x+1) + b = f(x) + a`\n但是对于一般的直线来讲, `a`和`y`都不会是整数.  所以我们不妨引入一个\"误差\". 我们一直沿x轴向右移动.  在这个过程中, 我们初始化误差`e`为`a`并以`a`步进, 用于决定每右移一个像素后, 是否要上移一个像素.  如果我们的误差高于0.5个像素(条件), 那就沿y轴上移一个像素, 此后再将误差值减小1个像素(修正值). 代码如下:  \n```cpp\nfloat e=a;\nfloat y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > 0.5) {\n        y++;\n        e=e+a-1;\n    }\n    else {\n        e=e+a;\n    }\n}\n```\n(请注意, 我们将误差`e`初始化为`a`而不是`0`, 因为我们在绘制像素之后才做出决定, 并且在绘制第一个像素之前并不需要检验`e > 0.5`这一条件, 因为起点总是恰好在直线上.)\n现在, 我们已经更进一步了. 但仍有两点有悖于整数运算: `0.5`, 还有`a`(也就是`dy/dx`).  但是: 我们能够以任意比例缩放误差的步长(还有条件), 且并不会影响结果.  想想看: 目前为止我们以1像素为单位修正误差(因为起初这很直观), 但是这个算法可以使用任意值来修正误差——半个像素, 两个像素, π个像素. \n因此, 我们只需将初始值及步长`a`缩放为`2*dy`, 条件`0.5`缩放为`dx`, 修正值1缩放为`2*dx`即可摆脱上面的两个分数! (从某种意义上说, 此处的关键在于我们使用的不是算法中的常数, 而是直线的导出函数). 代码如下: \n```cpp\nint e=2*dy;\nint y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > dx) {\n        y++;\n        e=e+2*dy - 2*dx;\n    }\n    else {\n        e=e+2*dy;\n    }\n}\n```\n现在, 我们的目的达成了: 只有整数参与运算. (这里需要注意的一点是: 从`float`改用`int`的同时, 直线的端点自动折合成了整数坐标----整数端点是Bresenham算法的先决条件, 同时也是其局限性). \n此外, 还有一个缺陷: 条件含有变量. 如果以一个常量作为条件进行对比, 计算会更加高效, 而最理想的条件是常量0, 因为依赖符号/零标志的判断分支节省了比较操作.  我们可以通过改变误差的修正值来实现这一点. 同理, 不仅修正值的缩放比例可以任意选择, 误差的初始值也可以. 下面我们来看看如何修改初始值以使条件变为常量0: \n我们的条件目前是`e > dx`, 因此将误差初始值偏移`-dx`将使我们能够对`0`进行比较(现在`0`表示`dx`之前的含义, 即0.5像素). 这个偏移只会影响`e`的初始值和条件, 并且条件中所有的步长都和以前一样: \n```cpp\nint e=2*dy-dx;\nint y=y1;\nint x=x1;\nwhile(x<=x2) {\n    SetPixel(x,y);\n    x++;\n    if (e > 0) {\n        y++;\n        e=e+2*dy - 2*dx;\n    }\n    else {\n        e=e+2*dy;\n    }\n}\n```\n看, `2*dy-dx`这样出现了 ;)\n\n------\n\n## 参考\n\n测试数据参考: https://blog.csdn.net/demonliuhui/article/details/52985949\n\n推广算法参考: [Generalized Bresenham's Line Drawing Algorithm using OpenGL](http://code-blocks.blogspot.hk/2014/12/generalized-bresenhams-line-drawing.html)","slug":"Bresenham","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjgn3ozw50002acfi7qbdd1kn","content":"<h2 id=\"简单版本\"><a href=\"#简单版本\" class=\"headerlink\" title=\"简单版本\"></a>简单版本</h2><p><a href=\"https://book.douban.com/subject/3629471/\" target=\"_blank\" rel=\"noopener\">教材</a>P17简单版本的Bresenham直线算法的C++代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*简单版本的Bresenham算法核心代码*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bresenhamLineOriginal</span><span class=\"params\">(<span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0, <span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> y1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = x0, dx = (x1 - x0);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y = y0, dy = (y1 - y0);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> k = (<span class=\"keyword\">float</span>)dy / dx, e = <span class=\"number\">-0.5</span>; x &lt; x1; ++x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglVertex2i(x, y);</span><br><span class=\"line\">\t\te = e + k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (e &gt;= <span class=\"number\">0</span>) &#123; ++y; --e; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>测试数据及效果图如下:<br><img src=\"/2018/04/01/Bresenham/简单版本的Bresenham直线算法效果图.png\" alt=\"简单版本的Bresenham直线算法效果图\" title=\"简单版本的Bresenham直线算法\"></p>\n<h2 id=\"推广算法\"><a href=\"#推广算法\" class=\"headerlink\" title=\"推广算法\"></a>推广算法</h2><p>从上图及其测试数据可以看出, 简单形式的Bresenham直线算法仅支持斜率区间为<code>[0,1]</code>的直线, 而且还有<code>x0 &lt;= x2</code>这样一个隐含条件.<br>如何推广到任意直线, 下面简单说一下:</p>\n<ul>\n<li>去掉<code>x0 &lt;= x2</code>隐含条件, 只需要将横坐标的原步长<code>1</code>加上<code>x1-x0</code>的符号即可;</li>\n<li>把斜率区间<code>[0,1]</code>推广到<code>[-1,1]</code> 只需要将纵坐标的原步长<code>1</code>加上<code>y1-y0</code>的符号即可;</li>\n<li>把斜率区间从<code>[-1,1]</code>推广到任意, 只需要在斜率绝对值大于<code>1</code>时变换横纵坐标轴即可.</li>\n</ul>\n<p>代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;GL\\GLUT.H&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求绝对值*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; <span class=\"keyword\">return</span> (a &lt; <span class=\"number\">0</span> ? -a : a); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*取符号, 正为1, 负为-1, 零为0*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">sign</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; <span class=\"keyword\">return</span> ((a &gt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (a &lt; <span class=\"number\">0</span> ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*交换数值*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; <span class=\"keyword\">int</span> temp = a; a = b; b = temp; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Bresenham画线, 起点为(x0,y0), 终点为(x1,y1)*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BresenhamLine</span><span class=\"params\">(<span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0, <span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> y1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; X, Y, XY &#125;;<span class=\"comment\">//枚举0, 1, 2, 提高可读性</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*XY坐标距离distance, 用于更新决策参数dp*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[XY] = &#123; <span class=\"built_in\">abs</span>(x1 - x0),<span class=\"built_in\">abs</span>(y1 - y0) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*XY坐标差符号sign, 用于更新坐标光标cur*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s[XY] = &#123; sign(x1 - x0),sign(y1 - y0) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*考虑是否变换坐标轴, 以处理斜率绝对值大于1的直线*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = (d[X] &lt; d[Y]);<span class=\"comment\">//斜率绝对值大于1则需要变换</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag) swap(d[X], d[Y]);<span class=\"comment\">//需要变换则交换XY轴坐标距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur[XY] = &#123; x0,y0 &#125;;<span class=\"comment\">//cursor, 坐标光标, 初始化为起点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dp = <span class=\"number\">2</span> * d[Y] - d[X];<span class=\"comment\">//decision parameter, 决策参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= d[X]; ++i)<span class=\"comment\">//光标遍历, 逐个画点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglVertex2i(cur[X], cur[Y]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dp &gt;= <span class=\"number\">0</span>)<span class=\"comment\">//判断决策参数</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcur[!flag] += s[!flag];<span class=\"comment\">//更新纵坐标(若未变换)</span></span><br><span class=\"line\">\t\t\tdp -= <span class=\"number\">2</span> * d[X];<span class=\"comment\">//修正决策参数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcur[flag] += s[flag];<span class=\"comment\">//更新横坐标(若未变换)</span></span><br><span class=\"line\">\t\tdp += <span class=\"number\">2</span> * d[Y];<span class=\"comment\">//更新决策参数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tglClearColor(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);<span class=\"comment\">//白色背景</span></span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);<span class=\"comment\">//填充背景色</span></span><br><span class=\"line\">\tglColor3f(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">//蓝绿色笔画</span></span><br><span class=\"line\">\tglPointSize(<span class=\"number\">5.0f</span>);<span class=\"comment\">//笔画粗细5</span></span><br><span class=\"line\">\tglBegin(GL_POINTS);<span class=\"comment\">//开始绘制</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">64</span>, <span class=\"number\">128</span>, <span class=\"number\">64</span>, <span class=\"number\">128</span>);<span class=\"comment\">//点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">250</span>, <span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">500</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=1</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=-0.5\t</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=-0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnd();<span class=\"comment\">//结束绘制</span></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class=\"line\">\tglutInitWindowPosition(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">\tglutInitWindowSize(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">\tglutCreateWindow(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\">\tgluOrtho2D(<span class=\"number\">0.0</span>, <span class=\"number\">500.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">500.0</span>);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试数据及效果图如下:<br><img src=\"/2018/04/01/Bresenham/推广后的Bresenham直线算法效果图.png\" alt=\"推广后的Bresenham直线算法效果图\" title=\"推广后的Bresenham直线算法\"></p>\n<h2 id=\"决策参数\"><a href=\"#决策参数\" class=\"headerlink\" title=\"决策参数\"></a>决策参数</h2><p>但是从简单到复杂的过程中还有一个变化是我不太理解的, 那就是决策参数<code>dp</code>(也就是原代码中的<code>e</code>). 初始值从<code>-0.5</code>改为<code>2 * d[Y] - d[X]</code>, 步长从斜率<code>k</code>改为<code>2 * d[Y]</code>, 大于零时的修正值从<code>-1</code>改为<code>2 * d[X]</code>. 这是为什么呢.</p>\n<hr>\n<p>以下是解答部分:<br><a href=\"https://stackoverflow.com/questions/19188319/Bresenham-line-algorithm-where-does-the-decision-parameter-come-from\" target=\"_blank\" rel=\"noopener\">opengl - Bresenham line algorithm - where does the decision parameter come from? - Stack Overflow</a><br>以下是原答案的个人翻译:<br>Bresenham算法只进行整数运算. 主要思想在于尽量减少直线方程增量估值的计算.<br>该算法非常简单. 我们从直线方程入手:<br><code>f(x) = y = a*x +b</code><br>(目前假设<code>0 &lt;= a &lt; 1</code>). 当我们向右移一个像素时, 我们得到:<br><code>f(x+1) = a * (x+1) + b = f(x) + a</code><br>但是对于一般的直线来讲, <code>a</code>和<code>y</code>都不会是整数.  所以我们不妨引入一个&quot;误差&quot;. 我们一直沿x轴向右移动.  在这个过程中, 我们初始化误差<code>e</code>为<code>a</code>并以<code>a</code>步进, 用于决定每右移一个像素后, 是否要上移一个像素.  如果我们的误差高于0.5个像素(条件), 那就沿y轴上移一个像素, 此后再将误差值减小1个像素(修正值). 代码如下:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> e=a;</span><br><span class=\"line\"><span class=\"keyword\">float</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+a<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(请注意, 我们将误差<code>e</code>初始化为<code>a</code>而不是<code>0</code>, 因为我们在绘制像素之后才做出决定, 并且在绘制第一个像素之前并不需要检验<code>e &gt; 0.5</code>这一条件, 因为起点总是恰好在直线上.)<br>现在, 我们已经更进一步了. 但仍有两点有悖于整数运算: <code>0.5</code>, 还有<code>a</code>(也就是<code>dy/dx</code>).  但是: 我们能够以任意比例缩放误差的步长(还有条件), 且并不会影响结果.  想想看: 目前为止我们以1像素为单位修正误差(因为起初这很直观), 但是这个算法可以使用任意值来修正误差——半个像素, 两个像素, π个像素.<br>因此, 我们只需将初始值及步长<code>a</code>缩放为<code>2*dy</code>, 条件<code>0.5</code>缩放为<code>dx</code>, 修正值1缩放为<code>2*dx</code>即可摆脱上面的两个分数! (从某种意义上说, 此处的关键在于我们使用的不是算法中的常数, 而是直线的导出函数). 代码如下:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> e=<span class=\"number\">2</span>*dy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; dx) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy - <span class=\"number\">2</span>*dx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在, 我们的目的达成了: 只有整数参与运算. (这里需要注意的一点是: 从<code>float</code>改用<code>int</code>的同时, 直线的端点自动折合成了整数坐标----整数端点是Bresenham算法的先决条件, 同时也是其局限性).<br>此外, 还有一个缺陷: 条件含有变量. 如果以一个常量作为条件进行对比, 计算会更加高效, 而最理想的条件是常量0, 因为依赖符号/零标志的判断分支节省了比较操作.  我们可以通过改变误差的修正值来实现这一点. 同理, 不仅修正值的缩放比例可以任意选择, 误差的初始值也可以. 下面我们来看看如何修改初始值以使条件变为常量0:<br>我们的条件目前是<code>e &gt; dx</code>, 因此将误差初始值偏移<code>-dx</code>将使我们能够对<code>0</code>进行比较(现在<code>0</code>表示<code>dx</code>之前的含义, 即0.5像素). 这个偏移只会影响<code>e</code>的初始值和条件, 并且条件中所有的步长都和以前一样:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> e=<span class=\"number\">2</span>*dy-dx;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy - <span class=\"number\">2</span>*dx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看, <code>2*dy-dx</code>这样出现了 ;)</p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>测试数据参考: <a href=\"https://blog.csdn.net/demonliuhui/article/details/52985949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/demonliuhui/article/details/52985949</a></p>\n<p>推广算法参考: <a href=\"http://code-blocks.blogspot.hk/2014/12/generalized-bresenhams-line-drawing.html\" target=\"_blank\" rel=\"noopener\">Generalized Bresenham&#39;s Line Drawing Algorithm using OpenGL</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简单版本\"><a href=\"#简单版本\" class=\"headerlink\" title=\"简单版本\"></a>简单版本</h2><p><a href=\"https://book.douban.com/subject/3629471/\" target=\"_blank\" rel=\"noopener\">教材</a>P17简单版本的Bresenham直线算法的C++代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*简单版本的Bresenham算法核心代码*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bresenhamLineOriginal</span><span class=\"params\">(<span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0, <span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> y1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = x0, dx = (x1 - x0);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y = y0, dy = (y1 - y0);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> k = (<span class=\"keyword\">float</span>)dy / dx, e = <span class=\"number\">-0.5</span>; x &lt; x1; ++x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglVertex2i(x, y);</span><br><span class=\"line\">\t\te = e + k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (e &gt;= <span class=\"number\">0</span>) &#123; ++y; --e; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>测试数据及效果图如下:<br><img src=\"/2018/04/01/Bresenham/简单版本的Bresenham直线算法效果图.png\" alt=\"简单版本的Bresenham直线算法效果图\" title=\"简单版本的Bresenham直线算法\"></p>\n<h2 id=\"推广算法\"><a href=\"#推广算法\" class=\"headerlink\" title=\"推广算法\"></a>推广算法</h2><p>从上图及其测试数据可以看出, 简单形式的Bresenham直线算法仅支持斜率区间为<code>[0,1]</code>的直线, 而且还有<code>x0 &lt;= x2</code>这样一个隐含条件.<br>如何推广到任意直线, 下面简单说一下:</p>\n<ul>\n<li>去掉<code>x0 &lt;= x2</code>隐含条件, 只需要将横坐标的原步长<code>1</code>加上<code>x1-x0</code>的符号即可;</li>\n<li>把斜率区间<code>[0,1]</code>推广到<code>[-1,1]</code> 只需要将纵坐标的原步长<code>1</code>加上<code>y1-y0</code>的符号即可;</li>\n<li>把斜率区间从<code>[-1,1]</code>推广到任意, 只需要在斜率绝对值大于<code>1</code>时变换横纵坐标轴即可.</li>\n</ul>\n<p>代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;GL\\GLUT.H&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求绝对值*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">abs</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; <span class=\"keyword\">return</span> (a &lt; <span class=\"number\">0</span> ? -a : a); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*取符号, 正为1, 负为-1, 零为0*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">sign</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; <span class=\"keyword\">return</span> ((a &gt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (a &lt; <span class=\"number\">0</span> ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*交换数值*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; <span class=\"keyword\">int</span> temp = a; a = b; b = temp; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Bresenham画线, 起点为(x0,y0), 终点为(x1,y1)*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BresenhamLine</span><span class=\"params\">(<span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0, <span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> y1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; X, Y, XY &#125;;<span class=\"comment\">//枚举0, 1, 2, 提高可读性</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*XY坐标距离distance, 用于更新决策参数dp*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[XY] = &#123; <span class=\"built_in\">abs</span>(x1 - x0),<span class=\"built_in\">abs</span>(y1 - y0) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*XY坐标差符号sign, 用于更新坐标光标cur*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s[XY] = &#123; sign(x1 - x0),sign(y1 - y0) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*考虑是否变换坐标轴, 以处理斜率绝对值大于1的直线*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = (d[X] &lt; d[Y]);<span class=\"comment\">//斜率绝对值大于1则需要变换</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag) swap(d[X], d[Y]);<span class=\"comment\">//需要变换则交换XY轴坐标距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur[XY] = &#123; x0,y0 &#125;;<span class=\"comment\">//cursor, 坐标光标, 初始化为起点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dp = <span class=\"number\">2</span> * d[Y] - d[X];<span class=\"comment\">//decision parameter, 决策参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= d[X]; ++i)<span class=\"comment\">//光标遍历, 逐个画点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglVertex2i(cur[X], cur[Y]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dp &gt;= <span class=\"number\">0</span>)<span class=\"comment\">//判断决策参数</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcur[!flag] += s[!flag];<span class=\"comment\">//更新纵坐标(若未变换)</span></span><br><span class=\"line\">\t\t\tdp -= <span class=\"number\">2</span> * d[X];<span class=\"comment\">//修正决策参数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcur[flag] += s[flag];<span class=\"comment\">//更新横坐标(若未变换)</span></span><br><span class=\"line\">\t\tdp += <span class=\"number\">2</span> * d[Y];<span class=\"comment\">//更新决策参数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tglClearColor(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);<span class=\"comment\">//白色背景</span></span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);<span class=\"comment\">//填充背景色</span></span><br><span class=\"line\">\tglColor3f(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">//蓝绿色笔画</span></span><br><span class=\"line\">\tglPointSize(<span class=\"number\">5.0f</span>);<span class=\"comment\">//笔画粗细5</span></span><br><span class=\"line\">\tglBegin(GL_POINTS);<span class=\"comment\">//开始绘制</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">64</span>, <span class=\"number\">128</span>, <span class=\"number\">64</span>, <span class=\"number\">128</span>);<span class=\"comment\">//点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">250</span>, <span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">500</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k不存在</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=0</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>);<span class=\"comment\">//k=1</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">250</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=-0.5\t</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">250</span>);<span class=\"comment\">//k=-0.5</span></span><br><span class=\"line\">\tBresenhamLine(<span class=\"number\">000</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, <span class=\"number\">000</span>);<span class=\"comment\">//k=-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnd();<span class=\"comment\">//结束绘制</span></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class=\"line\">\tglutInitWindowPosition(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">\tglutInitWindowSize(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">\tglutCreateWindow(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\">\tgluOrtho2D(<span class=\"number\">0.0</span>, <span class=\"number\">500.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">500.0</span>);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试数据及效果图如下:<br><img src=\"/2018/04/01/Bresenham/推广后的Bresenham直线算法效果图.png\" alt=\"推广后的Bresenham直线算法效果图\" title=\"推广后的Bresenham直线算法\"></p>\n<h2 id=\"决策参数\"><a href=\"#决策参数\" class=\"headerlink\" title=\"决策参数\"></a>决策参数</h2><p>但是从简单到复杂的过程中还有一个变化是我不太理解的, 那就是决策参数<code>dp</code>(也就是原代码中的<code>e</code>). 初始值从<code>-0.5</code>改为<code>2 * d[Y] - d[X]</code>, 步长从斜率<code>k</code>改为<code>2 * d[Y]</code>, 大于零时的修正值从<code>-1</code>改为<code>2 * d[X]</code>. 这是为什么呢.</p>\n<hr>\n<p>以下是解答部分:<br><a href=\"https://stackoverflow.com/questions/19188319/Bresenham-line-algorithm-where-does-the-decision-parameter-come-from\" target=\"_blank\" rel=\"noopener\">opengl - Bresenham line algorithm - where does the decision parameter come from? - Stack Overflow</a><br>以下是原答案的个人翻译:<br>Bresenham算法只进行整数运算. 主要思想在于尽量减少直线方程增量估值的计算.<br>该算法非常简单. 我们从直线方程入手:<br><code>f(x) = y = a*x +b</code><br>(目前假设<code>0 &lt;= a &lt; 1</code>). 当我们向右移一个像素时, 我们得到:<br><code>f(x+1) = a * (x+1) + b = f(x) + a</code><br>但是对于一般的直线来讲, <code>a</code>和<code>y</code>都不会是整数.  所以我们不妨引入一个&quot;误差&quot;. 我们一直沿x轴向右移动.  在这个过程中, 我们初始化误差<code>e</code>为<code>a</code>并以<code>a</code>步进, 用于决定每右移一个像素后, 是否要上移一个像素.  如果我们的误差高于0.5个像素(条件), 那就沿y轴上移一个像素, 此后再将误差值减小1个像素(修正值). 代码如下:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> e=a;</span><br><span class=\"line\"><span class=\"keyword\">float</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+a<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(请注意, 我们将误差<code>e</code>初始化为<code>a</code>而不是<code>0</code>, 因为我们在绘制像素之后才做出决定, 并且在绘制第一个像素之前并不需要检验<code>e &gt; 0.5</code>这一条件, 因为起点总是恰好在直线上.)<br>现在, 我们已经更进一步了. 但仍有两点有悖于整数运算: <code>0.5</code>, 还有<code>a</code>(也就是<code>dy/dx</code>).  但是: 我们能够以任意比例缩放误差的步长(还有条件), 且并不会影响结果.  想想看: 目前为止我们以1像素为单位修正误差(因为起初这很直观), 但是这个算法可以使用任意值来修正误差——半个像素, 两个像素, π个像素.<br>因此, 我们只需将初始值及步长<code>a</code>缩放为<code>2*dy</code>, 条件<code>0.5</code>缩放为<code>dx</code>, 修正值1缩放为<code>2*dx</code>即可摆脱上面的两个分数! (从某种意义上说, 此处的关键在于我们使用的不是算法中的常数, 而是直线的导出函数). 代码如下:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> e=<span class=\"number\">2</span>*dy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; dx) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy - <span class=\"number\">2</span>*dx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在, 我们的目的达成了: 只有整数参与运算. (这里需要注意的一点是: 从<code>float</code>改用<code>int</code>的同时, 直线的端点自动折合成了整数坐标----整数端点是Bresenham算法的先决条件, 同时也是其局限性).<br>此外, 还有一个缺陷: 条件含有变量. 如果以一个常量作为条件进行对比, 计算会更加高效, 而最理想的条件是常量0, 因为依赖符号/零标志的判断分支节省了比较操作.  我们可以通过改变误差的修正值来实现这一点. 同理, 不仅修正值的缩放比例可以任意选择, 误差的初始值也可以. 下面我们来看看如何修改初始值以使条件变为常量0:<br>我们的条件目前是<code>e &gt; dx</code>, 因此将误差初始值偏移<code>-dx</code>将使我们能够对<code>0</code>进行比较(现在<code>0</code>表示<code>dx</code>之前的含义, 即0.5像素). 这个偏移只会影响<code>e</code>的初始值和条件, 并且条件中所有的步长都和以前一样:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> e=<span class=\"number\">2</span>*dy-dx;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y=y1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=x1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(x&lt;=x2) &#123;</span><br><span class=\"line\">    SetPixel(x,y);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy - <span class=\"number\">2</span>*dx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        e=e+<span class=\"number\">2</span>*dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看, <code>2*dy-dx</code>这样出现了 ;)</p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>测试数据参考: <a href=\"https://blog.csdn.net/demonliuhui/article/details/52985949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/demonliuhui/article/details/52985949</a></p>\n<p>推广算法参考: <a href=\"http://code-blocks.blogspot.hk/2014/12/generalized-bresenhams-line-drawing.html\" target=\"_blank\" rel=\"noopener\">Generalized Bresenham&#39;s Line Drawing Algorithm using OpenGL</a></p>"},{"title":"OpenGL中Bézier曲线及其deCasteljau剖分算法","date":"2018-04-28T04:50:32.000Z","updated":"2018-04-28T15:59:59.000Z","mathjax":true,"_content":"\n> 当年还在用Windows XP的时候, 有一个屏保就叫贝塞尔曲线, 还是挺好看的, 我们来看一下怎么实现.\n\n# Bézier曲线\n\n一条$n$次Bézier曲线可以表示为: $$R(t)=\\sum_{i=0}^n R_iB_{i,n}(t),\\quad 0\\leq t\\leq 1$$\n\n> $R_i$是控制顶点, 我们可以看出, 一条$n$次Bézier曲线有$n+1$个控制顶点, 即$n$次$n+1$阶曲线.\n>\n> $B_{i,n}(t)$是Bernstein基函数, 定义为: $B_{i,n}(t)=C_n^i(1-t)^{n-i}t^i$, 其中$C_n^i$为二项式系数$C_n^i=\\frac{n!}{i!(n-i)!}$.\n\n- 从几何意义上看, 当参数$t=0$时, 对应的是曲线的第$0$个控制顶点; 而当参数$t=1$时, 对应的是曲线的第$n$个控制顶点. 这就是Bézier曲线的端点插值特性, 即$R(0)=R_0$, $R(1)=R_n$.\n\n\n- 由于二项式系数的对称特性$C_n^i=C_n^{n-i}$, Bézier曲线控制顶点的也具有几何地位上的对称性, 即$\\sum_iR_iB_{i,n}(t)=\\sum_iR_{n-i}B_{i,n}(t)$. \n\nBézier曲线还有其他的性质, 这里就不展开讨论了. 下面重点讲一下如何求Bézier曲线的任意点.\n\n<!-- more -->\n\n# 按曲线定义求值\n\n按照定义公式求Bézier曲线上参数$t$对应点的过程, 就是对这$n+1$个控制顶点各分量(比如二维时即横纵坐标分量)经由Bernstein基函数进行混合后累加, 最终得到参数$t$对应点坐标.\n\n从上一节里我们可以看出, 在用定义求值的过程中, 涉及到的运算有阶乘, 乘幂. 当曲线次数很低时, 这看起来是很简单的, 但当曲线次数上升, 数值稳定性就炸了. 对应的一套代码我也写了一遍, 就不贴上来丢人了, 光是一个乘幂函数就经不起数值稳定性考验.\n\n# de Casteljau剖分算法求值\n\ndeCasteljau剖分算法是我们实际应用中对Bézier曲线进行求值以及逼近绘制等操作所使用的算法. 相比前面的定义求值法, 它更加快速且稳定, 更贴近Bézier曲线特性.\n\n先上结论, de Casteljau算法的核心内容是*线性插值(Linear interpolation).* 什么是线性插值呢?\n\n## 线性Bézier曲线\n\n两点一线, 控制多边形恰好是一条线段, 即是最简单的线性曲线.\n\n![线性曲线](线性曲线.gif \"线性曲线\")\n\n此时原始公式特化为: $$R(t)=(1-t)R_0+tR_1$$\n\n**这, 就是线性插值.**\n\n## 二次Bézier曲线\n\n三点两线, 控制多边形有两条线段, 便是二次曲线.\n\n![二次曲线](二次曲线.gif \"二次曲线\")\n\n此时我们需要**3**次线性插值才能得到$R(t)$ :\n\n$R_0^{(1)}=(1-t)R_0+tR_1$;\n\n$R_1^{(1)}=(1-t)R_1+tR_2$;\n\n$R(t)=R_0^{(2)}=(1-t)R_0^{(1)}+tR_1^{(1)}$.\n\n其中$R_0^{(1)}​$可以参照上图中左边的绿点, $R_1^{(1)}​$则是右边的绿点.\n\n## 更高次的情况\n\n我这里只继续搬一些动图, 感受一下如何逐渐推广.\n\n![三次曲线](三次曲线.gif \"三次曲线\")\n\n<center>三次曲线</center>\n\n![四次曲线](四次曲线.gif \"四次曲线\")\n\n<center>四次曲线</center>\n\n![五次曲线](五次曲线.gif \"五次曲线\")\n\n<center>五次曲线</center>\n\n## 推广\n\n从最开始的线性一次曲线, 到二次, 再到更高次, 我们发现, 只要对控制多边形上的各个线段当成线性曲线进行线性插值, 就会得到更少的点和线段, 只要重复进行线性插值, 无论多少次的曲线, 最终都会出现三次, 二次, 最终得到一个线性曲线, 进行最后一次线性插值, 我们就得到了想要的点.\n\n这个线性插值的重复过程我参考了很多资料后觉得还是用下图中的金字塔来描述最形象, 自下而上, 最后得到塔顶即是所求的点.\n\n![deCasteljau金字塔](deCasteljau金字塔.png \"deCasteljau金字塔\")\n\n以下代码仅为de Casteljau算法求值的示例代码, 头文件的具体实现取决于该函数的需求: \n\n```cpp\n#include\"Point.h\"  //二维坐标点\n#include\"Bezier.h\" //Bezier曲线\n#include<assert.h>\nPoint deCasteljauEval(const Bezier& R, double t)\n{\n\tassert(R.getOrder());//确保曲线存在(阶数大于零)\n\tint n = R.getOrder() - 1;//曲线次数n\n\tPoint ** P = new Point*[n + 1];//为金字塔申请n+1层\n\tfor (int i = 0; i <= n; i++)//为每一层金字塔申请内存\n\t{\n\t\tP[i] = new Point[n - i + 1];//第0层长度为n+1并逐层递减至1\n\t\tP[0][i] = R[i];//第0层填入曲线R的n+1个控制顶点\n\t}\n\tfor (int s = 1; s <= n; s++)//遍历第1~n层金字塔\n\t\tfor (int i = 0; i <= n - s; i++)//第s层长度为n-s+1\n\t\t{\n\t\t\tP[s][i] = (1 - t) * P[s - 1][i] + (t)* P[s - 1][i + 1];\n\t\t\t//第s层第i点由下层的第i跟i+1点线性插值得出\n\t\t}\n\tPoint Rt = P[n][0];//得到金字塔顶的点, 即曲线上参数t对应的点R(t)\n\tfor (int i = 0; i <= n; i++) delete[]P[i]; delete[]P;//释放内存\n\treturn Rt;\n}\n```\n\n## 演示\n\n![剖分过程](deCasteljau剖分过程.gif \"剖分过程\")\n\n# 参考资料\n\n[The de Casteljau Algorithm for Evaluating Bezier Curves](https://liolok.github.io/2018/04/28/Bezier-and-deCasteljau/decasteljau_john.pdf), 这篇论文给了我很大启发.\n\n[Bézier curve - Wikipedia](https://en.wikipedia.org/wiki/B%C3%A9zier_curve)([中文维基](https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)), Bézier曲线动图示例出处.\n\n","source":"_posts/2018-04-28-Bezier-and-deCasteljau.md","raw":"---\ntitle: OpenGL中Bézier曲线及其deCasteljau剖分算法\ndate: 2018-04-28 12:50:32\nupdated: 2018-04-28 23:59:59\ntags: OpenGL\nmathjax: true\n---\n\n> 当年还在用Windows XP的时候, 有一个屏保就叫贝塞尔曲线, 还是挺好看的, 我们来看一下怎么实现.\n\n# Bézier曲线\n\n一条$n$次Bézier曲线可以表示为: $$R(t)=\\sum_{i=0}^n R_iB_{i,n}(t),\\quad 0\\leq t\\leq 1$$\n\n> $R_i$是控制顶点, 我们可以看出, 一条$n$次Bézier曲线有$n+1$个控制顶点, 即$n$次$n+1$阶曲线.\n>\n> $B_{i,n}(t)$是Bernstein基函数, 定义为: $B_{i,n}(t)=C_n^i(1-t)^{n-i}t^i$, 其中$C_n^i$为二项式系数$C_n^i=\\frac{n!}{i!(n-i)!}$.\n\n- 从几何意义上看, 当参数$t=0$时, 对应的是曲线的第$0$个控制顶点; 而当参数$t=1$时, 对应的是曲线的第$n$个控制顶点. 这就是Bézier曲线的端点插值特性, 即$R(0)=R_0$, $R(1)=R_n$.\n\n\n- 由于二项式系数的对称特性$C_n^i=C_n^{n-i}$, Bézier曲线控制顶点的也具有几何地位上的对称性, 即$\\sum_iR_iB_{i,n}(t)=\\sum_iR_{n-i}B_{i,n}(t)$. \n\nBézier曲线还有其他的性质, 这里就不展开讨论了. 下面重点讲一下如何求Bézier曲线的任意点.\n\n<!-- more -->\n\n# 按曲线定义求值\n\n按照定义公式求Bézier曲线上参数$t$对应点的过程, 就是对这$n+1$个控制顶点各分量(比如二维时即横纵坐标分量)经由Bernstein基函数进行混合后累加, 最终得到参数$t$对应点坐标.\n\n从上一节里我们可以看出, 在用定义求值的过程中, 涉及到的运算有阶乘, 乘幂. 当曲线次数很低时, 这看起来是很简单的, 但当曲线次数上升, 数值稳定性就炸了. 对应的一套代码我也写了一遍, 就不贴上来丢人了, 光是一个乘幂函数就经不起数值稳定性考验.\n\n# de Casteljau剖分算法求值\n\ndeCasteljau剖分算法是我们实际应用中对Bézier曲线进行求值以及逼近绘制等操作所使用的算法. 相比前面的定义求值法, 它更加快速且稳定, 更贴近Bézier曲线特性.\n\n先上结论, de Casteljau算法的核心内容是*线性插值(Linear interpolation).* 什么是线性插值呢?\n\n## 线性Bézier曲线\n\n两点一线, 控制多边形恰好是一条线段, 即是最简单的线性曲线.\n\n![线性曲线](线性曲线.gif \"线性曲线\")\n\n此时原始公式特化为: $$R(t)=(1-t)R_0+tR_1$$\n\n**这, 就是线性插值.**\n\n## 二次Bézier曲线\n\n三点两线, 控制多边形有两条线段, 便是二次曲线.\n\n![二次曲线](二次曲线.gif \"二次曲线\")\n\n此时我们需要**3**次线性插值才能得到$R(t)$ :\n\n$R_0^{(1)}=(1-t)R_0+tR_1$;\n\n$R_1^{(1)}=(1-t)R_1+tR_2$;\n\n$R(t)=R_0^{(2)}=(1-t)R_0^{(1)}+tR_1^{(1)}$.\n\n其中$R_0^{(1)}​$可以参照上图中左边的绿点, $R_1^{(1)}​$则是右边的绿点.\n\n## 更高次的情况\n\n我这里只继续搬一些动图, 感受一下如何逐渐推广.\n\n![三次曲线](三次曲线.gif \"三次曲线\")\n\n<center>三次曲线</center>\n\n![四次曲线](四次曲线.gif \"四次曲线\")\n\n<center>四次曲线</center>\n\n![五次曲线](五次曲线.gif \"五次曲线\")\n\n<center>五次曲线</center>\n\n## 推广\n\n从最开始的线性一次曲线, 到二次, 再到更高次, 我们发现, 只要对控制多边形上的各个线段当成线性曲线进行线性插值, 就会得到更少的点和线段, 只要重复进行线性插值, 无论多少次的曲线, 最终都会出现三次, 二次, 最终得到一个线性曲线, 进行最后一次线性插值, 我们就得到了想要的点.\n\n这个线性插值的重复过程我参考了很多资料后觉得还是用下图中的金字塔来描述最形象, 自下而上, 最后得到塔顶即是所求的点.\n\n![deCasteljau金字塔](deCasteljau金字塔.png \"deCasteljau金字塔\")\n\n以下代码仅为de Casteljau算法求值的示例代码, 头文件的具体实现取决于该函数的需求: \n\n```cpp\n#include\"Point.h\"  //二维坐标点\n#include\"Bezier.h\" //Bezier曲线\n#include<assert.h>\nPoint deCasteljauEval(const Bezier& R, double t)\n{\n\tassert(R.getOrder());//确保曲线存在(阶数大于零)\n\tint n = R.getOrder() - 1;//曲线次数n\n\tPoint ** P = new Point*[n + 1];//为金字塔申请n+1层\n\tfor (int i = 0; i <= n; i++)//为每一层金字塔申请内存\n\t{\n\t\tP[i] = new Point[n - i + 1];//第0层长度为n+1并逐层递减至1\n\t\tP[0][i] = R[i];//第0层填入曲线R的n+1个控制顶点\n\t}\n\tfor (int s = 1; s <= n; s++)//遍历第1~n层金字塔\n\t\tfor (int i = 0; i <= n - s; i++)//第s层长度为n-s+1\n\t\t{\n\t\t\tP[s][i] = (1 - t) * P[s - 1][i] + (t)* P[s - 1][i + 1];\n\t\t\t//第s层第i点由下层的第i跟i+1点线性插值得出\n\t\t}\n\tPoint Rt = P[n][0];//得到金字塔顶的点, 即曲线上参数t对应的点R(t)\n\tfor (int i = 0; i <= n; i++) delete[]P[i]; delete[]P;//释放内存\n\treturn Rt;\n}\n```\n\n## 演示\n\n![剖分过程](deCasteljau剖分过程.gif \"剖分过程\")\n\n# 参考资料\n\n[The de Casteljau Algorithm for Evaluating Bezier Curves](https://liolok.github.io/2018/04/28/Bezier-and-deCasteljau/decasteljau_john.pdf), 这篇论文给了我很大启发.\n\n[Bézier curve - Wikipedia](https://en.wikipedia.org/wiki/B%C3%A9zier_curve)([中文维基](https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A)), Bézier曲线动图示例出处.\n\n","slug":"Bezier-and-deCasteljau","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjgn3ozxu0007acfixr0nxcrr","content":"<blockquote>\n<p>当年还在用Windows XP的时候, 有一个屏保就叫贝塞尔曲线, 还是挺好看的, 我们来看一下怎么实现.</p>\n</blockquote>\n<h1 id=\"Bezier曲线\"><a href=\"#Bezier曲线\" class=\"headerlink\" title=\"Bézier曲线\"></a>Bézier曲线</h1><p>一条$n$次Bézier曲线可以表示为: $$R(t)=\\sum_{i=0}^n R_iB_{i,n}(t),\\quad 0\\leq t\\leq 1$$</p>\n<blockquote>\n<p>$R_i$是控制顶点, 我们可以看出, 一条$n$次Bézier曲线有$n+1$个控制顶点, 即$n$次$n+1$阶曲线.</p>\n<p>$B_{i,n}(t)$是Bernstein基函数, 定义为: $B_{i,n}(t)=C_n^i(1-t)^{n-i}t^i$, 其中$C_n^i$为二项式系数$C_n^i=\\frac{n!}{i!(n-i)!}$.</p>\n</blockquote>\n<ul>\n<li>从几何意义上看, 当参数$t=0$时, 对应的是曲线的第$0$个控制顶点; 而当参数$t=1$时, 对应的是曲线的第$n$个控制顶点. 这就是Bézier曲线的端点插值特性, 即$R(0)=R_0$, $R(1)=R_n$.</li>\n</ul>\n<ul>\n<li>由于二项式系数的对称特性$C_n^i=C_n^{n-i}$, Bézier曲线控制顶点的也具有几何地位上的对称性, 即$\\sum_iR_iB_{i,n}(t)=\\sum_iR_{n-i}B_{i,n}(t)$. </li>\n</ul>\n<p>Bézier曲线还有其他的性质, 这里就不展开讨论了. 下面重点讲一下如何求Bézier曲线的任意点.</p>\n<a id=\"more\"></a>\n<h1 id=\"按曲线定义求值\"><a href=\"#按曲线定义求值\" class=\"headerlink\" title=\"按曲线定义求值\"></a>按曲线定义求值</h1><p>按照定义公式求Bézier曲线上参数$t$对应点的过程, 就是对这$n+1$个控制顶点各分量(比如二维时即横纵坐标分量)经由Bernstein基函数进行混合后累加, 最终得到参数$t$对应点坐标.</p>\n<p>从上一节里我们可以看出, 在用定义求值的过程中, 涉及到的运算有阶乘, 乘幂. 当曲线次数很低时, 这看起来是很简单的, 但当曲线次数上升, 数值稳定性就炸了. 对应的一套代码我也写了一遍, 就不贴上来丢人了, 光是一个乘幂函数就经不起数值稳定性考验.</p>\n<h1 id=\"de-Casteljau剖分算法求值\"><a href=\"#de-Casteljau剖分算法求值\" class=\"headerlink\" title=\"de Casteljau剖分算法求值\"></a>de Casteljau剖分算法求值</h1><p>deCasteljau剖分算法是我们实际应用中对Bézier曲线进行求值以及逼近绘制等操作所使用的算法. 相比前面的定义求值法, 它更加快速且稳定, 更贴近Bézier曲线特性.</p>\n<p>先上结论, de Casteljau算法的核心内容是<em>线性插值(Linear interpolation).</em> 什么是线性插值呢?</p>\n<h2 id=\"线性Bezier曲线\"><a href=\"#线性Bezier曲线\" class=\"headerlink\" title=\"线性Bézier曲线\"></a>线性Bézier曲线</h2><p>两点一线, 控制多边形恰好是一条线段, 即是最简单的线性曲线.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/线性曲线.gif\" alt=\"线性曲线\" title=\"线性曲线\"></p>\n<p>此时原始公式特化为: $$R(t)=(1-t)R_0+tR_1$$</p>\n<p><strong>这, 就是线性插值.</strong></p>\n<h2 id=\"二次Bezier曲线\"><a href=\"#二次Bezier曲线\" class=\"headerlink\" title=\"二次Bézier曲线\"></a>二次Bézier曲线</h2><p>三点两线, 控制多边形有两条线段, 便是二次曲线.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/二次曲线.gif\" alt=\"二次曲线\" title=\"二次曲线\"></p>\n<p>此时我们需要<strong>3</strong>次线性插值才能得到$R(t)$ :</p>\n<p>$R_0^{(1)}=(1-t)R_0+tR_1$;</p>\n<p>$R_1^{(1)}=(1-t)R_1+tR_2$;</p>\n<p>$R(t)=R_0^{(2)}=(1-t)R_0^{(1)}+tR_1^{(1)}$.</p>\n<p>其中$R_0^{(1)}​$可以参照上图中左边的绿点, $R_1^{(1)}​$则是右边的绿点.</p>\n<h2 id=\"更高次的情况\"><a href=\"#更高次的情况\" class=\"headerlink\" title=\"更高次的情况\"></a>更高次的情况</h2><p>我这里只继续搬一些动图, 感受一下如何逐渐推广.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/三次曲线.gif\" alt=\"三次曲线\" title=\"三次曲线\"></p>\n<center>三次曲线</center>\n\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/四次曲线.gif\" alt=\"四次曲线\" title=\"四次曲线\"></p>\n<center>四次曲线</center>\n\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/五次曲线.gif\" alt=\"五次曲线\" title=\"五次曲线\"></p>\n<center>五次曲线</center>\n\n<h2 id=\"推广\"><a href=\"#推广\" class=\"headerlink\" title=\"推广\"></a>推广</h2><p>从最开始的线性一次曲线, 到二次, 再到更高次, 我们发现, 只要对控制多边形上的各个线段当成线性曲线进行线性插值, 就会得到更少的点和线段, 只要重复进行线性插值, 无论多少次的曲线, 最终都会出现三次, 二次, 最终得到一个线性曲线, 进行最后一次线性插值, 我们就得到了想要的点.</p>\n<p>这个线性插值的重复过程我参考了很多资料后觉得还是用下图中的金字塔来描述最形象, 自下而上, 最后得到塔顶即是所求的点.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/deCasteljau金字塔.png\" alt=\"deCasteljau金字塔\" title=\"deCasteljau金字塔\"></p>\n<p>以下代码仅为de Casteljau算法求值的示例代码, 头文件的具体实现取决于该函数的需求: </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Point.h\"</span>  <span class=\"comment\">//二维坐标点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Bezier.h\"</span> <span class=\"comment\">//Bezier曲线</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">deCasteljauEval</span><span class=\"params\">(<span class=\"keyword\">const</span> Bezier&amp; R, <span class=\"keyword\">double</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(R.getOrder());<span class=\"comment\">//确保曲线存在(阶数大于零)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = R.getOrder() - <span class=\"number\">1</span>;<span class=\"comment\">//曲线次数n</span></span><br><span class=\"line\">\tPoint ** P = <span class=\"keyword\">new</span> Point*[n + <span class=\"number\">1</span>];<span class=\"comment\">//为金字塔申请n+1层</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)<span class=\"comment\">//为每一层金字塔申请内存</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tP[i] = <span class=\"keyword\">new</span> Point[n - i + <span class=\"number\">1</span>];<span class=\"comment\">//第0层长度为n+1并逐层递减至1</span></span><br><span class=\"line\">\t\tP[<span class=\"number\">0</span>][i] = R[i];<span class=\"comment\">//第0层填入曲线R的n+1个控制顶点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">1</span>; s &lt;= n; s++)<span class=\"comment\">//遍历第1~n层金字塔</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - s; i++)<span class=\"comment\">//第s层长度为n-s+1</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tP[s][i] = (<span class=\"number\">1</span> - t) * P[s - <span class=\"number\">1</span>][i] + (t)* P[s - <span class=\"number\">1</span>][i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//第s层第i点由下层的第i跟i+1点线性插值得出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tPoint Rt = P[n][<span class=\"number\">0</span>];<span class=\"comment\">//得到金字塔顶的点, 即曲线上参数t对应的点R(t)</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) <span class=\"keyword\">delete</span>[]P[i]; <span class=\"keyword\">delete</span>[]P;<span class=\"comment\">//释放内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Rt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h2><p><img src=\"/2018/04/28/Bezier-and-deCasteljau/deCasteljau剖分过程.gif\" alt=\"剖分过程\" title=\"剖分过程\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://liolok.github.io/2018/04/28/Bezier-and-deCasteljau/decasteljau_john.pdf\">The de Casteljau Algorithm for Evaluating Bezier Curves</a>, 这篇论文给了我很大启发.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\" target=\"_blank\" rel=\"noopener\">Bézier curve - Wikipedia</a>(<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"noopener\">中文维基</a>), Bézier曲线动图示例出处.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>当年还在用Windows XP的时候, 有一个屏保就叫贝塞尔曲线, 还是挺好看的, 我们来看一下怎么实现.</p>\n</blockquote>\n<h1 id=\"Bezier曲线\"><a href=\"#Bezier曲线\" class=\"headerlink\" title=\"Bézier曲线\"></a>Bézier曲线</h1><p>一条$n$次Bézier曲线可以表示为: $$R(t)=\\sum_{i=0}^n R_iB_{i,n}(t),\\quad 0\\leq t\\leq 1$$</p>\n<blockquote>\n<p>$R_i$是控制顶点, 我们可以看出, 一条$n$次Bézier曲线有$n+1$个控制顶点, 即$n$次$n+1$阶曲线.</p>\n<p>$B_{i,n}(t)$是Bernstein基函数, 定义为: $B_{i,n}(t)=C_n^i(1-t)^{n-i}t^i$, 其中$C_n^i$为二项式系数$C_n^i=\\frac{n!}{i!(n-i)!}$.</p>\n</blockquote>\n<ul>\n<li>从几何意义上看, 当参数$t=0$时, 对应的是曲线的第$0$个控制顶点; 而当参数$t=1$时, 对应的是曲线的第$n$个控制顶点. 这就是Bézier曲线的端点插值特性, 即$R(0)=R_0$, $R(1)=R_n$.</li>\n</ul>\n<ul>\n<li>由于二项式系数的对称特性$C_n^i=C_n^{n-i}$, Bézier曲线控制顶点的也具有几何地位上的对称性, 即$\\sum_iR_iB_{i,n}(t)=\\sum_iR_{n-i}B_{i,n}(t)$. </li>\n</ul>\n<p>Bézier曲线还有其他的性质, 这里就不展开讨论了. 下面重点讲一下如何求Bézier曲线的任意点.</p>","more":"<h1 id=\"按曲线定义求值\"><a href=\"#按曲线定义求值\" class=\"headerlink\" title=\"按曲线定义求值\"></a>按曲线定义求值</h1><p>按照定义公式求Bézier曲线上参数$t$对应点的过程, 就是对这$n+1$个控制顶点各分量(比如二维时即横纵坐标分量)经由Bernstein基函数进行混合后累加, 最终得到参数$t$对应点坐标.</p>\n<p>从上一节里我们可以看出, 在用定义求值的过程中, 涉及到的运算有阶乘, 乘幂. 当曲线次数很低时, 这看起来是很简单的, 但当曲线次数上升, 数值稳定性就炸了. 对应的一套代码我也写了一遍, 就不贴上来丢人了, 光是一个乘幂函数就经不起数值稳定性考验.</p>\n<h1 id=\"de-Casteljau剖分算法求值\"><a href=\"#de-Casteljau剖分算法求值\" class=\"headerlink\" title=\"de Casteljau剖分算法求值\"></a>de Casteljau剖分算法求值</h1><p>deCasteljau剖分算法是我们实际应用中对Bézier曲线进行求值以及逼近绘制等操作所使用的算法. 相比前面的定义求值法, 它更加快速且稳定, 更贴近Bézier曲线特性.</p>\n<p>先上结论, de Casteljau算法的核心内容是<em>线性插值(Linear interpolation).</em> 什么是线性插值呢?</p>\n<h2 id=\"线性Bezier曲线\"><a href=\"#线性Bezier曲线\" class=\"headerlink\" title=\"线性Bézier曲线\"></a>线性Bézier曲线</h2><p>两点一线, 控制多边形恰好是一条线段, 即是最简单的线性曲线.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/线性曲线.gif\" alt=\"线性曲线\" title=\"线性曲线\"></p>\n<p>此时原始公式特化为: $$R(t)=(1-t)R_0+tR_1$$</p>\n<p><strong>这, 就是线性插值.</strong></p>\n<h2 id=\"二次Bezier曲线\"><a href=\"#二次Bezier曲线\" class=\"headerlink\" title=\"二次Bézier曲线\"></a>二次Bézier曲线</h2><p>三点两线, 控制多边形有两条线段, 便是二次曲线.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/二次曲线.gif\" alt=\"二次曲线\" title=\"二次曲线\"></p>\n<p>此时我们需要<strong>3</strong>次线性插值才能得到$R(t)$ :</p>\n<p>$R_0^{(1)}=(1-t)R_0+tR_1$;</p>\n<p>$R_1^{(1)}=(1-t)R_1+tR_2$;</p>\n<p>$R(t)=R_0^{(2)}=(1-t)R_0^{(1)}+tR_1^{(1)}$.</p>\n<p>其中$R_0^{(1)}​$可以参照上图中左边的绿点, $R_1^{(1)}​$则是右边的绿点.</p>\n<h2 id=\"更高次的情况\"><a href=\"#更高次的情况\" class=\"headerlink\" title=\"更高次的情况\"></a>更高次的情况</h2><p>我这里只继续搬一些动图, 感受一下如何逐渐推广.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/三次曲线.gif\" alt=\"三次曲线\" title=\"三次曲线\"></p>\n<center>三次曲线</center>\n\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/四次曲线.gif\" alt=\"四次曲线\" title=\"四次曲线\"></p>\n<center>四次曲线</center>\n\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/五次曲线.gif\" alt=\"五次曲线\" title=\"五次曲线\"></p>\n<center>五次曲线</center>\n\n<h2 id=\"推广\"><a href=\"#推广\" class=\"headerlink\" title=\"推广\"></a>推广</h2><p>从最开始的线性一次曲线, 到二次, 再到更高次, 我们发现, 只要对控制多边形上的各个线段当成线性曲线进行线性插值, 就会得到更少的点和线段, 只要重复进行线性插值, 无论多少次的曲线, 最终都会出现三次, 二次, 最终得到一个线性曲线, 进行最后一次线性插值, 我们就得到了想要的点.</p>\n<p>这个线性插值的重复过程我参考了很多资料后觉得还是用下图中的金字塔来描述最形象, 自下而上, 最后得到塔顶即是所求的点.</p>\n<p><img src=\"/2018/04/28/Bezier-and-deCasteljau/deCasteljau金字塔.png\" alt=\"deCasteljau金字塔\" title=\"deCasteljau金字塔\"></p>\n<p>以下代码仅为de Casteljau算法求值的示例代码, 头文件的具体实现取决于该函数的需求: </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Point.h\"</span>  <span class=\"comment\">//二维坐标点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Bezier.h\"</span> <span class=\"comment\">//Bezier曲线</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">deCasteljauEval</span><span class=\"params\">(<span class=\"keyword\">const</span> Bezier&amp; R, <span class=\"keyword\">double</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(R.getOrder());<span class=\"comment\">//确保曲线存在(阶数大于零)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = R.getOrder() - <span class=\"number\">1</span>;<span class=\"comment\">//曲线次数n</span></span><br><span class=\"line\">\tPoint ** P = <span class=\"keyword\">new</span> Point*[n + <span class=\"number\">1</span>];<span class=\"comment\">//为金字塔申请n+1层</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)<span class=\"comment\">//为每一层金字塔申请内存</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tP[i] = <span class=\"keyword\">new</span> Point[n - i + <span class=\"number\">1</span>];<span class=\"comment\">//第0层长度为n+1并逐层递减至1</span></span><br><span class=\"line\">\t\tP[<span class=\"number\">0</span>][i] = R[i];<span class=\"comment\">//第0层填入曲线R的n+1个控制顶点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">1</span>; s &lt;= n; s++)<span class=\"comment\">//遍历第1~n层金字塔</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - s; i++)<span class=\"comment\">//第s层长度为n-s+1</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tP[s][i] = (<span class=\"number\">1</span> - t) * P[s - <span class=\"number\">1</span>][i] + (t)* P[s - <span class=\"number\">1</span>][i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//第s层第i点由下层的第i跟i+1点线性插值得出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tPoint Rt = P[n][<span class=\"number\">0</span>];<span class=\"comment\">//得到金字塔顶的点, 即曲线上参数t对应的点R(t)</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) <span class=\"keyword\">delete</span>[]P[i]; <span class=\"keyword\">delete</span>[]P;<span class=\"comment\">//释放内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Rt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h2><p><img src=\"/2018/04/28/Bezier-and-deCasteljau/deCasteljau剖分过程.gif\" alt=\"剖分过程\" title=\"剖分过程\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://liolok.github.io/2018/04/28/Bezier-and-deCasteljau/decasteljau_john.pdf\">The de Casteljau Algorithm for Evaluating Bezier Curves</a>, 这篇论文给了我很大启发.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\" target=\"_blank\" rel=\"noopener\">Bézier curve - Wikipedia</a>(<a href=\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\" target=\"_blank\" rel=\"noopener\">中文维基</a>), Bézier曲线动图示例出处.</p>"},{"title":"Hexo + GitHub Pages 博客搭建","date":"2018-04-14T02:41:26.000Z","updated":"2018-04-18T16:00:00.000Z","description":"<center>基于Hexo框架和GitHub Pages托管服务的个人博客搭建过程</center>","_content":"# 本地 - Hexo博客框架\n\nHexo是一个基于**Node.js**的博客框架, 我们会在本地维护一个Hexo项目, 并在需要发布时使用**Git**将其部署到Github Pages.\n\n> Hexo[官方网站](https://hexo.io/zh-cn/)及[中文文档](https://hexo.io/zh-cn/docs/)\n\n## Node.js环境搭建\n\n在[Node.js官方下载页面](https://nodejs.org/en/download/)可以下载到全平台各种形式的Node.js资源, 这里直接给出当前(2018年4月中旬)最新的长期支持版Windows64位安装包[下载链接](https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi).\n\n安装完成后打开命令提示符*(Win + R运行`cmd`)*, 输入`node -v`验证Node.js环境配置成功, 输入`npm -v`验证Node.js的包管理器安装成功.\n\n![验证Node.js环境配置与npm安装](验证Node.js环境配置与npm安装.png \"验证Node.js及npm安装\")\n\n## Git环境搭建\n\n在[Git官方下载页面](https://git-scm.com/downloads)可以下载到全平台的Git安装包.\n\n**未翻墙**用户在[Git for Windows 国内下载站](https://github.com/waylau/git-for-win)可以下载到Windows平台的Git安装包.\n\n![Git安装](Git安装.png \"Git安装\")\n\n下图中的Windows资源管理器目录下的右键菜单选项`Git Bash Here`会取代Windows自带的命令提示符, 是后续的基本操作.\n\n![Git右键菜单](Git右键菜单.png \"Git右键菜单\")\n\n安装完成后在任意目录下右键空白处`Git Bash Here`后输入`git --version`验证Git安装成功.\n\n![验证Git安装](验证Git安装.png \"验证Git安装\")\n\n## Hexo框架安装\n\n在Git Bash中输入`npm install -g hexo-cli`以安装Hexo框架.\n\nWindows平台上可能会有如下两个WARN, 提示可选依赖`fsevent`安装失败, 因为需要的系统环境是OS X的darwin, **忽略**即可.\n\n> `npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):`\n>\n> `npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"  win32\",\"arch\":\"x64\"})`\n\n安装完成后继续输入`hexo version`验证安装.\n\n![验证Hexo安装](验证Hexo安装.png \"验证Hexo安装\")\n\n## 创建一个博客\n\n详细内容请参考Hexo官方文档中的[建站](https://hexo.io/zh-cn/docs/setup.html)\n\n可以在想要创建博客所在目录运行Git Bash命令行输入`hexo init blogname`, 其中`blogname`是博客名称, 也可以先创建`blogname`子目录并在其中运行`hexo init`, 结果是一样的. 下图中使用的是后一种方式.\n\n![创建博客](创建博客.png \"创建博客\")\n\n上图中的`npm install`命令应该是用来安装所需的Nodejs模块的, 笔者感觉只是起到确保更新到最新的作用.\n\n现在我们得到了`blogname`这个目录, 它将是我们的博客在本地磁盘的实例, 是未发布的线下版本, 我们对博客的各种配置, 博文的创建与编辑, 都是在这里进行的.\n\n## 本地预览博客\n\n上面我们已经创建了一个崭新的博客, 就先来看看它对应的网页是什么样子吧. \n\n在博客目录下运行Git Bash命令`hexo server`或其简写`hexo s`\n\n根据命令的回显, 访问http://localhost:4000, 即可浏览该博客.\n\n![预览博客](预览博客.png \"预览博客\")\n\n我们看到的会是hexo默认的博客, landscape主题, 标题是Hexo, 只有一篇Hello World博文作为快速指南.\n\n初级阶段, 我们的想法很简单:\n\n- 博客标题总得改成自己的命名, 这会涉及到基本的博客[配置](https://hexo.io/zh-cn/docs/configuration.html);\n- 起码要把默认的博文换成自己写的, 这会涉及到博文的[写作](https://hexo.io/zh-cn/docs/writing.html).\n\n不过这就是本地博客的事情了, 我们暂且放下这些, 继续搭建过程.\n\n# 云端 - GitHub Pages\n\n> GitHub Pages [官方网站](https://pages.github.com)以及[官方帮助](https://help.github.com/categories/github-pages-basics/)\n>\n\n> GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.\n\n简单说, GitHub Pages是一个静态网站托管服务. 很巧的是Hexo就是一个静态博客框架, 而且目前为止我们已经在本地准备好了一个Hexo博客. 所以我们需要创建一个用来部署网站的代码仓库, 就可以把博客托管在上面了.\n\n## 创建博客专用仓库\n\n用你自己的[GitHub账号](https://github.com/join)进行[New repository](https://github.com/new)操作, 详细配置如下, **替换**`liolok`为你的GitHub账号用户名(与左边的Owner**一致**)即可.\n\n![创建仓库](创建仓库.png \"创建仓库\")\n\n在此之后, 这个独属于你的GitHub代码仓库就可以用来部署你的博客了.\n\n## 配置Git本地个人信息\n\n将向repo提交commits的身份设为你自己.\n\n在Git Bash中运行下面两条命令:\n\n`git config --global user.name \"你的用户名\"`\n\n`git config --global user.email \"注册邮箱\"`\n\n## 修改博客的部署配置\n\n详细内容请参考官方文档中的[部署](https://hexo.io/zh-cn/docs/deployment.html)\n\n博客目录下的`_config.yml`是博客整体配置文件, 我们修改其中的`deploy`部分为自己的参数.\n\n```YML\ndeploy:\n  type: git\n  repo: https://github.com/你的用户名/你的用户名.github.io.git\n  branch: master\n```\n\n![修改部署配置](修改部署配置.png \"修改部署配置\")\n\n\n\n## 部署博客到代码仓库\n\n在博客目录下运行Git Bash并输入`hexo deploy -generate`或其简写`hexo -d -g`, 让Hexo在生成静态文件完毕后自动部署网站到前面配置好的GitHub代码仓库.\n\n![部署博客](部署博客.png \"部署博客\")\n\n如上图所示, 在(第一次)部署时会弹出GitHub的登陆对话框, 登录即可.\n\n稍等片刻, 访问`https://你的用户名.github.io`, 博客应该已经呈现在眼前了.","source":"_posts/2018-04-14-Hexo-GitHub-Pages.md","raw":"---\ntitle: Hexo + GitHub Pages 博客搭建\ndate: 2018-04-14 10:41:26\nupdated: 2018-04-19\ntags: \n\t- Hexo\n\t- Github Pages\ndescription: <center>基于Hexo框架和GitHub Pages托管服务的个人博客搭建过程</center>\n---\n# 本地 - Hexo博客框架\n\nHexo是一个基于**Node.js**的博客框架, 我们会在本地维护一个Hexo项目, 并在需要发布时使用**Git**将其部署到Github Pages.\n\n> Hexo[官方网站](https://hexo.io/zh-cn/)及[中文文档](https://hexo.io/zh-cn/docs/)\n\n## Node.js环境搭建\n\n在[Node.js官方下载页面](https://nodejs.org/en/download/)可以下载到全平台各种形式的Node.js资源, 这里直接给出当前(2018年4月中旬)最新的长期支持版Windows64位安装包[下载链接](https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi).\n\n安装完成后打开命令提示符*(Win + R运行`cmd`)*, 输入`node -v`验证Node.js环境配置成功, 输入`npm -v`验证Node.js的包管理器安装成功.\n\n![验证Node.js环境配置与npm安装](验证Node.js环境配置与npm安装.png \"验证Node.js及npm安装\")\n\n## Git环境搭建\n\n在[Git官方下载页面](https://git-scm.com/downloads)可以下载到全平台的Git安装包.\n\n**未翻墙**用户在[Git for Windows 国内下载站](https://github.com/waylau/git-for-win)可以下载到Windows平台的Git安装包.\n\n![Git安装](Git安装.png \"Git安装\")\n\n下图中的Windows资源管理器目录下的右键菜单选项`Git Bash Here`会取代Windows自带的命令提示符, 是后续的基本操作.\n\n![Git右键菜单](Git右键菜单.png \"Git右键菜单\")\n\n安装完成后在任意目录下右键空白处`Git Bash Here`后输入`git --version`验证Git安装成功.\n\n![验证Git安装](验证Git安装.png \"验证Git安装\")\n\n## Hexo框架安装\n\n在Git Bash中输入`npm install -g hexo-cli`以安装Hexo框架.\n\nWindows平台上可能会有如下两个WARN, 提示可选依赖`fsevent`安装失败, 因为需要的系统环境是OS X的darwin, **忽略**即可.\n\n> `npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):`\n>\n> `npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"  win32\",\"arch\":\"x64\"})`\n\n安装完成后继续输入`hexo version`验证安装.\n\n![验证Hexo安装](验证Hexo安装.png \"验证Hexo安装\")\n\n## 创建一个博客\n\n详细内容请参考Hexo官方文档中的[建站](https://hexo.io/zh-cn/docs/setup.html)\n\n可以在想要创建博客所在目录运行Git Bash命令行输入`hexo init blogname`, 其中`blogname`是博客名称, 也可以先创建`blogname`子目录并在其中运行`hexo init`, 结果是一样的. 下图中使用的是后一种方式.\n\n![创建博客](创建博客.png \"创建博客\")\n\n上图中的`npm install`命令应该是用来安装所需的Nodejs模块的, 笔者感觉只是起到确保更新到最新的作用.\n\n现在我们得到了`blogname`这个目录, 它将是我们的博客在本地磁盘的实例, 是未发布的线下版本, 我们对博客的各种配置, 博文的创建与编辑, 都是在这里进行的.\n\n## 本地预览博客\n\n上面我们已经创建了一个崭新的博客, 就先来看看它对应的网页是什么样子吧. \n\n在博客目录下运行Git Bash命令`hexo server`或其简写`hexo s`\n\n根据命令的回显, 访问http://localhost:4000, 即可浏览该博客.\n\n![预览博客](预览博客.png \"预览博客\")\n\n我们看到的会是hexo默认的博客, landscape主题, 标题是Hexo, 只有一篇Hello World博文作为快速指南.\n\n初级阶段, 我们的想法很简单:\n\n- 博客标题总得改成自己的命名, 这会涉及到基本的博客[配置](https://hexo.io/zh-cn/docs/configuration.html);\n- 起码要把默认的博文换成自己写的, 这会涉及到博文的[写作](https://hexo.io/zh-cn/docs/writing.html).\n\n不过这就是本地博客的事情了, 我们暂且放下这些, 继续搭建过程.\n\n# 云端 - GitHub Pages\n\n> GitHub Pages [官方网站](https://pages.github.com)以及[官方帮助](https://help.github.com/categories/github-pages-basics/)\n>\n\n> GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.\n\n简单说, GitHub Pages是一个静态网站托管服务. 很巧的是Hexo就是一个静态博客框架, 而且目前为止我们已经在本地准备好了一个Hexo博客. 所以我们需要创建一个用来部署网站的代码仓库, 就可以把博客托管在上面了.\n\n## 创建博客专用仓库\n\n用你自己的[GitHub账号](https://github.com/join)进行[New repository](https://github.com/new)操作, 详细配置如下, **替换**`liolok`为你的GitHub账号用户名(与左边的Owner**一致**)即可.\n\n![创建仓库](创建仓库.png \"创建仓库\")\n\n在此之后, 这个独属于你的GitHub代码仓库就可以用来部署你的博客了.\n\n## 配置Git本地个人信息\n\n将向repo提交commits的身份设为你自己.\n\n在Git Bash中运行下面两条命令:\n\n`git config --global user.name \"你的用户名\"`\n\n`git config --global user.email \"注册邮箱\"`\n\n## 修改博客的部署配置\n\n详细内容请参考官方文档中的[部署](https://hexo.io/zh-cn/docs/deployment.html)\n\n博客目录下的`_config.yml`是博客整体配置文件, 我们修改其中的`deploy`部分为自己的参数.\n\n```YML\ndeploy:\n  type: git\n  repo: https://github.com/你的用户名/你的用户名.github.io.git\n  branch: master\n```\n\n![修改部署配置](修改部署配置.png \"修改部署配置\")\n\n\n\n## 部署博客到代码仓库\n\n在博客目录下运行Git Bash并输入`hexo deploy -generate`或其简写`hexo -d -g`, 让Hexo在生成静态文件完毕后自动部署网站到前面配置好的GitHub代码仓库.\n\n![部署博客](部署博客.png \"部署博客\")\n\n如上图所示, 在(第一次)部署时会弹出GitHub的登陆对话框, 登录即可.\n\n稍等片刻, 访问`https://你的用户名.github.io`, 博客应该已经呈现在眼前了.","slug":"Hexo-GitHub-Pages","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjgn3ozxv0008acfilkn25ggb","content":"<h1 id=\"本地-Hexo博客框架\"><a href=\"#本地-Hexo博客框架\" class=\"headerlink\" title=\"本地 - Hexo博客框架\"></a>本地 - Hexo博客框架</h1><p>Hexo是一个基于<strong>Node.js</strong>的博客框架, 我们会在本地维护一个Hexo项目, 并在需要发布时使用<strong>Git</strong>将其部署到Github Pages.</p>\n<blockquote>\n<p>Hexo<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官方网站</a>及<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</blockquote>\n<h2 id=\"Node-js环境搭建\"><a href=\"#Node-js环境搭建\" class=\"headerlink\" title=\"Node.js环境搭建\"></a>Node.js环境搭建</h2><p>在<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js官方下载页面</a>可以下载到全平台各种形式的Node.js资源, 这里直接给出当前(2018年4月中旬)最新的长期支持版Windows64位安装包<a href=\"https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">下载链接</a>.</p>\n<p>安装完成后打开命令提示符<em>(Win + R运行<code>cmd</code>)</em>, 输入<code>node -v</code>验证Node.js环境配置成功, 输入<code>npm -v</code>验证Node.js的包管理器安装成功.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Node.js环境配置与npm安装.png\" alt=\"验证Node.js环境配置与npm安装\" title=\"验证Node.js及npm安装\"></p>\n<h2 id=\"Git环境搭建\"><a href=\"#Git环境搭建\" class=\"headerlink\" title=\"Git环境搭建\"></a>Git环境搭建</h2><p>在<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git官方下载页面</a>可以下载到全平台的Git安装包.</p>\n<p><strong>未翻墙</strong>用户在<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git for Windows 国内下载站</a>可以下载到Windows平台的Git安装包.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/Git安装.png\" alt=\"Git安装\" title=\"Git安装\"></p>\n<p>下图中的Windows资源管理器目录下的右键菜单选项<code>Git Bash Here</code>会取代Windows自带的命令提示符, 是后续的基本操作.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/Git右键菜单.png\" alt=\"Git右键菜单\" title=\"Git右键菜单\"></p>\n<p>安装完成后在任意目录下右键空白处<code>Git Bash Here</code>后输入<code>git --version</code>验证Git安装成功.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Git安装.png\" alt=\"验证Git安装\" title=\"验证Git安装\"></p>\n<h2 id=\"Hexo框架安装\"><a href=\"#Hexo框架安装\" class=\"headerlink\" title=\"Hexo框架安装\"></a>Hexo框架安装</h2><p>在Git Bash中输入<code>npm install -g hexo-cli</code>以安装Hexo框架.</p>\n<p>Windows平台上可能会有如下两个WARN, 提示可选依赖<code>fsevent</code>安装失败, 因为需要的系统环境是OS X的darwin, <strong>忽略</strong>即可.</p>\n<blockquote>\n<p><code>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):</code></p>\n<p><code>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;  win32&quot;,&quot;arch&quot;:&quot;x64&quot;})</code></p>\n</blockquote>\n<p>安装完成后继续输入<code>hexo version</code>验证安装.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Hexo安装.png\" alt=\"验证Hexo安装\" title=\"验证Hexo安装\"></p>\n<h2 id=\"创建一个博客\"><a href=\"#创建一个博客\" class=\"headerlink\" title=\"创建一个博客\"></a>创建一个博客</h2><p>详细内容请参考Hexo官方文档中的<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"noopener\">建站</a></p>\n<p>可以在想要创建博客所在目录运行Git Bash命令行输入<code>hexo init blogname</code>, 其中<code>blogname</code>是博客名称, 也可以先创建<code>blogname</code>子目录并在其中运行<code>hexo init</code>, 结果是一样的. 下图中使用的是后一种方式.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/创建博客.png\" alt=\"创建博客\" title=\"创建博客\"></p>\n<p>上图中的<code>npm install</code>命令应该是用来安装所需的Nodejs模块的, 笔者感觉只是起到确保更新到最新的作用.</p>\n<p>现在我们得到了<code>blogname</code>这个目录, 它将是我们的博客在本地磁盘的实例, 是未发布的线下版本, 我们对博客的各种配置, 博文的创建与编辑, 都是在这里进行的.</p>\n<h2 id=\"本地预览博客\"><a href=\"#本地预览博客\" class=\"headerlink\" title=\"本地预览博客\"></a>本地预览博客</h2><p>上面我们已经创建了一个崭新的博客, 就先来看看它对应的网页是什么样子吧. </p>\n<p>在博客目录下运行Git Bash命令<code>hexo server</code>或其简写<code>hexo s</code></p>\n<p>根据命令的回显, 访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>, 即可浏览该博客.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/预览博客.png\" alt=\"预览博客\" title=\"预览博客\"></p>\n<p>我们看到的会是hexo默认的博客, landscape主题, 标题是Hexo, 只有一篇Hello World博文作为快速指南.</p>\n<p>初级阶段, 我们的想法很简单:</p>\n<ul>\n<li>博客标题总得改成自己的命名, 这会涉及到基本的博客<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">配置</a>;</li>\n<li>起码要把默认的博文换成自己写的, 这会涉及到博文的<a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"noopener\">写作</a>.</li>\n</ul>\n<p>不过这就是本地博客的事情了, 我们暂且放下这些, 继续搭建过程.</p>\n<h1 id=\"云端-GitHub-Pages\"><a href=\"#云端-GitHub-Pages\" class=\"headerlink\" title=\"云端 - GitHub Pages\"></a>云端 - GitHub Pages</h1><blockquote>\n<p>GitHub Pages <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">官方网站</a>以及<a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"noopener\">官方帮助</a></p>\n</blockquote>\n<blockquote>\n<p>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p>\n</blockquote>\n<p>简单说, GitHub Pages是一个静态网站托管服务. 很巧的是Hexo就是一个静态博客框架, 而且目前为止我们已经在本地准备好了一个Hexo博客. 所以我们需要创建一个用来部署网站的代码仓库, 就可以把博客托管在上面了.</p>\n<h2 id=\"创建博客专用仓库\"><a href=\"#创建博客专用仓库\" class=\"headerlink\" title=\"创建博客专用仓库\"></a>创建博客专用仓库</h2><p>用你自己的<a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">GitHub账号</a>进行<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">New repository</a>操作, 详细配置如下, <strong>替换</strong><code>liolok</code>为你的GitHub账号用户名(与左边的Owner<strong>一致</strong>)即可.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/创建仓库.png\" alt=\"创建仓库\" title=\"创建仓库\"></p>\n<p>在此之后, 这个独属于你的GitHub代码仓库就可以用来部署你的博客了.</p>\n<h2 id=\"配置Git本地个人信息\"><a href=\"#配置Git本地个人信息\" class=\"headerlink\" title=\"配置Git本地个人信息\"></a>配置Git本地个人信息</h2><p>将向repo提交commits的身份设为你自己.</p>\n<p>在Git Bash中运行下面两条命令:</p>\n<p><code>git config --global user.name &quot;你的用户名&quot;</code></p>\n<p><code>git config --global user.email &quot;注册邮箱&quot;</code></p>\n<h2 id=\"修改博客的部署配置\"><a href=\"#修改博客的部署配置\" class=\"headerlink\" title=\"修改博客的部署配置\"></a>修改博客的部署配置</h2><p>详细内容请参考官方文档中的<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">部署</a></p>\n<p>博客目录下的<code>_config.yml</code>是博客整体配置文件, 我们修改其中的<code>deploy</code>部分为自己的参数.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/你的用户名/你的用户名.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/修改部署配置.png\" alt=\"修改部署配置\" title=\"修改部署配置\"></p>\n<h2 id=\"部署博客到代码仓库\"><a href=\"#部署博客到代码仓库\" class=\"headerlink\" title=\"部署博客到代码仓库\"></a>部署博客到代码仓库</h2><p>在博客目录下运行Git Bash并输入<code>hexo deploy -generate</code>或其简写<code>hexo -d -g</code>, 让Hexo在生成静态文件完毕后自动部署网站到前面配置好的GitHub代码仓库.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/部署博客.png\" alt=\"部署博客\" title=\"部署博客\"></p>\n<p>如上图所示, 在(第一次)部署时会弹出GitHub的登陆对话框, 登录即可.</p>\n<p>稍等片刻, 访问<code>https://你的用户名.github.io</code>, 博客应该已经呈现在眼前了.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"本地-Hexo博客框架\"><a href=\"#本地-Hexo博客框架\" class=\"headerlink\" title=\"本地 - Hexo博客框架\"></a>本地 - Hexo博客框架</h1><p>Hexo是一个基于<strong>Node.js</strong>的博客框架, 我们会在本地维护一个Hexo项目, 并在需要发布时使用<strong>Git</strong>将其部署到Github Pages.</p>\n<blockquote>\n<p>Hexo<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官方网站</a>及<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</blockquote>\n<h2 id=\"Node-js环境搭建\"><a href=\"#Node-js环境搭建\" class=\"headerlink\" title=\"Node.js环境搭建\"></a>Node.js环境搭建</h2><p>在<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js官方下载页面</a>可以下载到全平台各种形式的Node.js资源, 这里直接给出当前(2018年4月中旬)最新的长期支持版Windows64位安装包<a href=\"https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">下载链接</a>.</p>\n<p>安装完成后打开命令提示符<em>(Win + R运行<code>cmd</code>)</em>, 输入<code>node -v</code>验证Node.js环境配置成功, 输入<code>npm -v</code>验证Node.js的包管理器安装成功.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Node.js环境配置与npm安装.png\" alt=\"验证Node.js环境配置与npm安装\" title=\"验证Node.js及npm安装\"></p>\n<h2 id=\"Git环境搭建\"><a href=\"#Git环境搭建\" class=\"headerlink\" title=\"Git环境搭建\"></a>Git环境搭建</h2><p>在<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git官方下载页面</a>可以下载到全平台的Git安装包.</p>\n<p><strong>未翻墙</strong>用户在<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git for Windows 国内下载站</a>可以下载到Windows平台的Git安装包.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/Git安装.png\" alt=\"Git安装\" title=\"Git安装\"></p>\n<p>下图中的Windows资源管理器目录下的右键菜单选项<code>Git Bash Here</code>会取代Windows自带的命令提示符, 是后续的基本操作.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/Git右键菜单.png\" alt=\"Git右键菜单\" title=\"Git右键菜单\"></p>\n<p>安装完成后在任意目录下右键空白处<code>Git Bash Here</code>后输入<code>git --version</code>验证Git安装成功.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Git安装.png\" alt=\"验证Git安装\" title=\"验证Git安装\"></p>\n<h2 id=\"Hexo框架安装\"><a href=\"#Hexo框架安装\" class=\"headerlink\" title=\"Hexo框架安装\"></a>Hexo框架安装</h2><p>在Git Bash中输入<code>npm install -g hexo-cli</code>以安装Hexo框架.</p>\n<p>Windows平台上可能会有如下两个WARN, 提示可选依赖<code>fsevent</code>安装失败, 因为需要的系统环境是OS X的darwin, <strong>忽略</strong>即可.</p>\n<blockquote>\n<p><code>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):</code></p>\n<p><code>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;  win32&quot;,&quot;arch&quot;:&quot;x64&quot;})</code></p>\n</blockquote>\n<p>安装完成后继续输入<code>hexo version</code>验证安装.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/验证Hexo安装.png\" alt=\"验证Hexo安装\" title=\"验证Hexo安装\"></p>\n<h2 id=\"创建一个博客\"><a href=\"#创建一个博客\" class=\"headerlink\" title=\"创建一个博客\"></a>创建一个博客</h2><p>详细内容请参考Hexo官方文档中的<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"noopener\">建站</a></p>\n<p>可以在想要创建博客所在目录运行Git Bash命令行输入<code>hexo init blogname</code>, 其中<code>blogname</code>是博客名称, 也可以先创建<code>blogname</code>子目录并在其中运行<code>hexo init</code>, 结果是一样的. 下图中使用的是后一种方式.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/创建博客.png\" alt=\"创建博客\" title=\"创建博客\"></p>\n<p>上图中的<code>npm install</code>命令应该是用来安装所需的Nodejs模块的, 笔者感觉只是起到确保更新到最新的作用.</p>\n<p>现在我们得到了<code>blogname</code>这个目录, 它将是我们的博客在本地磁盘的实例, 是未发布的线下版本, 我们对博客的各种配置, 博文的创建与编辑, 都是在这里进行的.</p>\n<h2 id=\"本地预览博客\"><a href=\"#本地预览博客\" class=\"headerlink\" title=\"本地预览博客\"></a>本地预览博客</h2><p>上面我们已经创建了一个崭新的博客, 就先来看看它对应的网页是什么样子吧. </p>\n<p>在博客目录下运行Git Bash命令<code>hexo server</code>或其简写<code>hexo s</code></p>\n<p>根据命令的回显, 访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>, 即可浏览该博客.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/预览博客.png\" alt=\"预览博客\" title=\"预览博客\"></p>\n<p>我们看到的会是hexo默认的博客, landscape主题, 标题是Hexo, 只有一篇Hello World博文作为快速指南.</p>\n<p>初级阶段, 我们的想法很简单:</p>\n<ul>\n<li>博客标题总得改成自己的命名, 这会涉及到基本的博客<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">配置</a>;</li>\n<li>起码要把默认的博文换成自己写的, 这会涉及到博文的<a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"noopener\">写作</a>.</li>\n</ul>\n<p>不过这就是本地博客的事情了, 我们暂且放下这些, 继续搭建过程.</p>\n<h1 id=\"云端-GitHub-Pages\"><a href=\"#云端-GitHub-Pages\" class=\"headerlink\" title=\"云端 - GitHub Pages\"></a>云端 - GitHub Pages</h1><blockquote>\n<p>GitHub Pages <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"noopener\">官方网站</a>以及<a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"noopener\">官方帮助</a></p>\n</blockquote>\n<blockquote>\n<p>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p>\n</blockquote>\n<p>简单说, GitHub Pages是一个静态网站托管服务. 很巧的是Hexo就是一个静态博客框架, 而且目前为止我们已经在本地准备好了一个Hexo博客. 所以我们需要创建一个用来部署网站的代码仓库, 就可以把博客托管在上面了.</p>\n<h2 id=\"创建博客专用仓库\"><a href=\"#创建博客专用仓库\" class=\"headerlink\" title=\"创建博客专用仓库\"></a>创建博客专用仓库</h2><p>用你自己的<a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">GitHub账号</a>进行<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">New repository</a>操作, 详细配置如下, <strong>替换</strong><code>liolok</code>为你的GitHub账号用户名(与左边的Owner<strong>一致</strong>)即可.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/创建仓库.png\" alt=\"创建仓库\" title=\"创建仓库\"></p>\n<p>在此之后, 这个独属于你的GitHub代码仓库就可以用来部署你的博客了.</p>\n<h2 id=\"配置Git本地个人信息\"><a href=\"#配置Git本地个人信息\" class=\"headerlink\" title=\"配置Git本地个人信息\"></a>配置Git本地个人信息</h2><p>将向repo提交commits的身份设为你自己.</p>\n<p>在Git Bash中运行下面两条命令:</p>\n<p><code>git config --global user.name &quot;你的用户名&quot;</code></p>\n<p><code>git config --global user.email &quot;注册邮箱&quot;</code></p>\n<h2 id=\"修改博客的部署配置\"><a href=\"#修改博客的部署配置\" class=\"headerlink\" title=\"修改博客的部署配置\"></a>修改博客的部署配置</h2><p>详细内容请参考官方文档中的<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">部署</a></p>\n<p>博客目录下的<code>_config.yml</code>是博客整体配置文件, 我们修改其中的<code>deploy</code>部分为自己的参数.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/你的用户名/你的用户名.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/修改部署配置.png\" alt=\"修改部署配置\" title=\"修改部署配置\"></p>\n<h2 id=\"部署博客到代码仓库\"><a href=\"#部署博客到代码仓库\" class=\"headerlink\" title=\"部署博客到代码仓库\"></a>部署博客到代码仓库</h2><p>在博客目录下运行Git Bash并输入<code>hexo deploy -generate</code>或其简写<code>hexo -d -g</code>, 让Hexo在生成静态文件完毕后自动部署网站到前面配置好的GitHub代码仓库.</p>\n<p><img src=\"/2018/04/14/Hexo-GitHub-Pages/部署博客.png\" alt=\"部署博客\" title=\"部署博客\"></p>\n<p>如上图所示, 在(第一次)部署时会弹出GitHub的登陆对话框, 登录即可.</p>\n<p>稍等片刻, 访问<code>https://你的用户名.github.io</code>, 博客应该已经呈现在眼前了.</p>\n"},{"title":"Hexo + NexT 博客定制","date":"2018-04-23T11:03:17.000Z","updated":"2018-04-25T13:10:31.000Z","description":"<center>上一篇讲的是本博客的搭建, 这一篇总结博客及主题的私人定制.</center>","_content":"\n> 配置修改提示: \n>\n> - 对照本文修改配置时, 应善用编辑器的**查找**功能*(Ctrl+F)*;\n> - 注意YAML语法缩进, 冒号与参数间需两个空格隔开;\n> - 建议修改前先把原有的语句备份注释*(一般是Ctrl+/)*.\n>\n\n# Hexo 站点配置\n\n照例先上官中[配置文档](https://hexo.io/zh-cn/docs/configuration.html), 通常这意味着本章节内容远不及官方文档全面, 而更倾向于个人的改动和见解.\n\n## 站点配置文件\n\n[创建](https://liolok.github.io/2018/04/14/Hexo-GitHub-Pages/#创建一个博客)博客`blogname`完成后, 站点配置信息位于`blogname\\_config.yml`文件(下图**右**)中, 本章节的配置修改, 如无特殊说明, 均在**站点配置文件**中操作.\n\n![注意区分站点配置和主题配置](注意区分站点配置和主题配置.png  \"注意区分站点配置和主题配置\")\n\n## 修改站点语言和时区\n\n```yaml\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n`language`, 语言字段, 填写`zh-CN`以适配NexT主题的简体中文. (参见NexT的[commit#e1e6cf8](https://github.com/theme-next/hexo-theme-next/commit/e1e6cf8fe0e0b6f22fed22e766019be74f83de5d))\n\n> 注: 不填写默认为`en`即英文, 也是可以的, 这完全取决于你喜欢英文还是方块字, 与文章的语言无关.\n\n`timezone`, 时区字段, 填写`Asia/Shanghai`. (参见维基的[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))\n\n> 注: 如果不填写该字段, Hexo会默认使用电脑的时区, 但此处的\"电脑\"是GitHub的美国服务器还是本机, 笔者尚不能确定, 只好确保时区信息正确.\n\n## 修改站点的网站链接\n\n```yaml\nurl: https://liolok.github.io/\nroot: /\n```\n\n`url`是站点所在的网址, `root`则是当站点被放在网站子目录下时指定子目录的. 如下:\n\n```yaml\nurl: https://liolok.github.io/blog\nroot: /blog/\n```\n## 修改文章默认文件名\n\n这个要从博客目录下的`hexo new \"文章标题\"`说起, 这条命令会在`source\\_post`目录下新建一个与Markdown文件, 我们就在这个文件里进行写作. 但是文章数量多起来之后这个目录恐怕会十分混乱. \n\n```yaml\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\n```\n\n`new_post_name`, 文章默认文件名, 将默认的`title.md`改为`:year-:month-:day-:title.md`, 这样一来, `source\\_post`目录下的文件(文件夹)命名就有了日期前缀而不是只有标题了, 方便本地文章的管理.\n\n![为文章默认文件名加上日期前缀](为文章默认文件名加上日期前缀.png \"为文章默认文件名加上日期前缀\")\n\n所以上图中与Markdown文件同名的文件夹又是哪里来的呢, 参见下一小节.\n\n## 开启文章资源文件夹\n\n```yaml\npost_asset_folder: true\n```\n\n开启了[文章资源文件夹](https://hexo.io/zh-cn/docs/asset-folders.html)这个选项后, 我们在运行`hexo new \"文章标题\"`命令时, Hexo会在新建Markdown文件的同时创建同名目录, 用来存放每篇文章所引用的资源, 这也同样是为了便于针对不同的文章分类管理资源文件.\n\n资源具体可以是图片, CSS, JS文件等等, 不过笔者目前也只用到了图片. 下面就举一个本地图片插入的例子.\n\n```markdown\n![示例图片替代文本](示例图片.jpg \"示例图片标题\")\n```\n\n![\"示例图片替代文本](示例图片.jpg \"示例图片标题\")\n\n>2018/04/29更新:\n上面的写法只在文章页面生效, 如果需要让图片在博客首页也能正常显示, 需要使用Hexo内置的插件语法:\n```markdown\n{% asset_img 示例图片.jpg 示例图片标题 %}\n```\n\n~~没错, 配合资源文件夹, 直接用标准的Markdown语法就可以做到, 无需插件. 相对路径中的斜杠`\\`和反斜杠`/`均亲测可用, 也没有遇到官方文档中提到的*首页可能无法正常显示图片*问题.~~\n\n~~笔者如此执着于Markdown标准语法, 是为了让文章的编辑能尽量做到所见即所得, 而不是彻底敲了代码再看输出. 配合[Typora](https://typora.io/)的插入图片功能及其优先使用相对路径选项, 只需要手动填写标题和代替文本即可, 笔者选择保持两者与图片文件名一致.~~\n\n## 解决引号半角变全角\n\n本地文章里英文半角的单引号`'`跟双引号`\"`在生成博客之后居然变成中文全角的`’`跟`“`了, 这还得了, 经过一番折腾以及对照后发现居然还不是主题以及站点的语言配置原因, 差点又怀疑人生, 所幸找到了Hexo的[issue#1981](https://github.com/hexojs/hexo/issues/1981), 看到了Hexo作者tommy351大神早在2016年轻描淡写的一句\"试试看\". 解决方案如下, 添加Marked渲染器配置字段:\n\n```yaml\nmarked:\n  smartypants: false\n```\n\n## 添加站点404页面\n\n404页面是当前网站下找不到链接对应内容的跳转页面, 一般要么是链接写错了要么是网站文件丢了. 如果不自己写,  也不是就没有这个页面, 而是会显示GitHub的404页面, 倒不是说不好看, 但是跟博客风格不统一, 还是不太好.\n\n在博客根目录`blogname`下运行`hexo new page 404`, 然后打开`blogname\\source\\404\\index.md`进行如下修改: \n\n```yaml\n---\ntitle: 404 Not Found <!-- 页面标题 -->\ndate: 2018-04-21 13:51:57\npermalink: /404 <!-- 永久链接 -->\n---\n```\n\n以上是`index.md`文件的头部, 后面的内容就跟写文章一样了, 在距\"找不到页面\"离题不远的范围内自由发挥即可.\n\n> 如需使用前文中的方法引用资源文件, 同样把文件放在`blogname\\source\\404\\index`目录下, 但相对路径要用`404\\index\\资源文件名`.\n\n## 使用NexT主题\n\n### 安装\n\n在`blogname`根目录下运行`git clone https://github.com/theme-next/hexo-theme-next themes/next` \n\n### 更新\n\n在`blogname\\themes\\next`目录下运行`git pull`\n\n### 开启\n\n修改**站点**配置文件, 将`theme`字段改为`next`\n\n```yaml\ntheme: next\n```\n# NexT 主题配置\n\n## 主题配置文件\n\n**主题**配置文件在`blogname\\themes\\next`下, 而**站点**配置文件在`blogname`根目录下, 注意区分. 下文的配置修改, 如无特殊说明, 均在**主题配置文件**(下图**左**)中操作.\n\n![注意区分站点配置和主题配置](注意区分站点配置和主题配置.png \"注意区分站点配置和主题配置\")\n\n> 笔者创建本文时, NexT主题的[新官网](https://theme-next.org/)仍然在建, 所以绝大多数配置参考自[旧版文档](https://theme-next.iissnan.com/theme-settings.html)和网络上更早的相关博文. 希望等全新的NexT网站建设完毕之后可以看到更多更详细的文(玩)档(法).\n\n## 修改汉化配置\n\n`blogname\\themes\\next\\languages`目录下存放的是NexT的多语言适配文件. 配合Hexo的站点语言配置, 我们可以修改其中的内容来实现一些多语言适配的修改, 如`zh-CN.yml`文件中的`symbol`字段`comma` `period` `colon`分别对应逗号句号和冒号, 笔者习惯使用英文符号, 所以做了如下修改:\n\n```yaml\nsymbol:\n  comma: \", \"\n  period: \". \"\n  colon: \": \"\n```\n\n当然这里只是根据个人口味酌情修改.\n\n## 修改网站图标\n\n把新图标文件放到`blogname\\themes\\next\\source\\images`目录下, 并修改`facicon`的`small`和`medium`即可.\n\n```yaml\nfavicon:\n  # small: /images/favicon-16x16-next.png\n  # medium: /images/favicon-32x32-next.png\n  small: /images/sakamoto.png\n  medium: /images/sakamoto.png\n```\n\n效果如下: \n\n![网站图标](网站图标.png \"网站图标\")\n\n## 修改网站页脚\n\n先上效果图: \n\n![网站页脚](网站页脚.png \"网站页脚\")\n\n以下均为`footer`段内内容, 注意两个空格缩进.\n\n### 设定建站年份\n\n```yaml\nfooter:\n  # 其他字段\n  since: 2018\n```\n\n> 如不设定则直接显示当前年份, 这样就不会有`© 20XX - 20XX`字样了.\n\n### 修改分隔图标\n\n这个图标的作用是分隔建站年份跟右边的版权信息. 图标名称参见[Font Awesome](https://fontawesome.com/icons).\n\n```yaml\nfooter:\n  # 其他字段\n  icon:\n    name: paper-plane  # 图标名称\n    animated: false  # 是否开启跳动动画\n    color: \"#808080\" # 十六进制颜色代码\n```\n\n> 比如`heart` `true` `#ff0000`这个组合效果是跳动的红心.\n\n### 增加托管信息\n\n```yaml\nfooter:\n  # 其他字段\n  custom_text: Hosted by <a target=\"_blank\" rel=\"external nofollow\" href=\"https://pages.github.com/\">GitHub Pages</a>\n```\n\n饮水思源, 表明博客站点托管于GitHub Pages服务.\n\n## 修改文章末尾\n\n先上效果图:\n\n![文章末尾](文章末尾.png \"文章末尾\")\n\n> 这里的本文链接来自于**站点配置**中的站点链接`url`(前面做过修改)和文章链接`permalink`(使用默认值).\n\n### 设定版权信息\n\n设定并开启文章的版权声明, 会在每一篇文章末尾显示. 笔者选择的是大多数个人博客的版权协议[CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh).\n\n```yaml\npost_copyright:\n  enable: true\n  license: <a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>\n```\n\n### 修改标签图标\n\n把文章标签前面默认的`#`符号替换为Font Awesome中的Tag图标\n\n修改主题布局模板`blogname\\themes\\next\\layout\\_macro\\post.swig`文件, 搜索`rel=\"tag\">#`并将其替换为`rel=\"tag\"><i class=\"fa fa-tag\"></i>`\n\n## 修改侧边栏\n\n![侧边栏](侧边栏.png \"侧边栏\")\n\n<center>侧边栏效果图</center>\n\n### 添加博主头像\n\n将头像文件放到`blogname\\themes\\next\\source\\images`中, 并修改`avatar`字段:\n\n```yaml\navatar: /images/头像文件名\n```\n\n### 添加社交链接\n\n添加链接及图标(仍然参见[Font Awesome](https://fontawesome.com/icons)), 用 `||` 隔开:\n\n```yaml\nsocial:\n  GitHub: https://github.com/yourname || github\n  Google: https://plus.google.com/yourname || google\n```\n\n如需加密社交链接, 要先开启**两处**依赖项`exturl`, 并对链接进行[Base64加密](https://www.base64encode.org/)后填入字段.\n\n```yaml\nexturl: true\n```\n## 移动端配置\n\n### 统一开启侧边栏及返回顶部按钮\n\n这样做的好处是各平台阅读体验能得到统一, 否则移动端看不到侧边栏, 既没有文章目录方便跳转, 也没有社交链接联系博主, 也没有快速返回顶部的按钮.\n\n```yaml\nsidebar:\n  onmobile: true\n```\n\n>  不过需要注意: 该选项仅适用于NexT主题的Muse和Mist两个样式.\n\n### Android Chrome 网站主题色\n\n```yaml\nandroid_chrome_color: \"#fff\"  # 白色\n```\n\n这里的颜色可以参考[Material Design](https://material.io/guidelines/style/color.html#color-color-palette), 不过博主只简单把默认的黑色改成了白色.\n\n## 文章阅读进度条\n\n![文章阅读进度条](文章阅读进度条.png \"文章阅读进度条\")\n\n个人觉得这个插件还是很实用且美观的~\n\n### 安装\n\n在`blogname`根目录下运行: \n\n```bash\ngit clone https://github.com/theme-next/theme-next-reading-progress themes/next/source/lib/reading_progress\n```\n\n### 更新\n\n在`blogname\\themes\\next\\source\\lib\\reading_progress`目录下运行`git pull`即可.\n\n### 开启并配置\n\n```yaml\nreading_progress:\n  enable: true\n  color: \"#37c6c0\"  # 十六进制颜色代码, 默认挺好看的\n  height: 2px  # 进度条宽度, 默认为2像素, 可以适度调宽\n```\n\n## 网页3D动态背景\n\n### 安装\n\n在`blogname`根目录下运行: \n\n```bash\ngit clone https://github.com/theme-next/theme-next-three source/lib/three themes/next/source/lib/three\n```\n\n### 更新\n\n在`blogname\\themes\\next\\source\\lib\\three`目录下运行`git pull`即可.\n\n### 开启并配置\n\n以下三种动态背景只能选一个, 笔者三个都试过之后选了线条, 球面有点精神污染的意思.\n\n```yaml\nthree_waves: false\ncanvas_lines: true\ncanvas_sphere: false\n```\n\n","source":"_posts/2018-04-23-Hexo-and-NexT.md","raw":"---\ntitle: Hexo + NexT 博客定制\ndate: 2018-04-23 19:03:17\nupdated: 2018-04-25 21:10:31\ntags:\n\t- Hexo\n\t- NexT\ndescription: <center>上一篇讲的是本博客的搭建, 这一篇总结博客及主题的私人定制.</center>\n---\n\n> 配置修改提示: \n>\n> - 对照本文修改配置时, 应善用编辑器的**查找**功能*(Ctrl+F)*;\n> - 注意YAML语法缩进, 冒号与参数间需两个空格隔开;\n> - 建议修改前先把原有的语句备份注释*(一般是Ctrl+/)*.\n>\n\n# Hexo 站点配置\n\n照例先上官中[配置文档](https://hexo.io/zh-cn/docs/configuration.html), 通常这意味着本章节内容远不及官方文档全面, 而更倾向于个人的改动和见解.\n\n## 站点配置文件\n\n[创建](https://liolok.github.io/2018/04/14/Hexo-GitHub-Pages/#创建一个博客)博客`blogname`完成后, 站点配置信息位于`blogname\\_config.yml`文件(下图**右**)中, 本章节的配置修改, 如无特殊说明, 均在**站点配置文件**中操作.\n\n![注意区分站点配置和主题配置](注意区分站点配置和主题配置.png  \"注意区分站点配置和主题配置\")\n\n## 修改站点语言和时区\n\n```yaml\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n`language`, 语言字段, 填写`zh-CN`以适配NexT主题的简体中文. (参见NexT的[commit#e1e6cf8](https://github.com/theme-next/hexo-theme-next/commit/e1e6cf8fe0e0b6f22fed22e766019be74f83de5d))\n\n> 注: 不填写默认为`en`即英文, 也是可以的, 这完全取决于你喜欢英文还是方块字, 与文章的语言无关.\n\n`timezone`, 时区字段, 填写`Asia/Shanghai`. (参见维基的[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))\n\n> 注: 如果不填写该字段, Hexo会默认使用电脑的时区, 但此处的\"电脑\"是GitHub的美国服务器还是本机, 笔者尚不能确定, 只好确保时区信息正确.\n\n## 修改站点的网站链接\n\n```yaml\nurl: https://liolok.github.io/\nroot: /\n```\n\n`url`是站点所在的网址, `root`则是当站点被放在网站子目录下时指定子目录的. 如下:\n\n```yaml\nurl: https://liolok.github.io/blog\nroot: /blog/\n```\n## 修改文章默认文件名\n\n这个要从博客目录下的`hexo new \"文章标题\"`说起, 这条命令会在`source\\_post`目录下新建一个与Markdown文件, 我们就在这个文件里进行写作. 但是文章数量多起来之后这个目录恐怕会十分混乱. \n\n```yaml\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\n```\n\n`new_post_name`, 文章默认文件名, 将默认的`title.md`改为`:year-:month-:day-:title.md`, 这样一来, `source\\_post`目录下的文件(文件夹)命名就有了日期前缀而不是只有标题了, 方便本地文章的管理.\n\n![为文章默认文件名加上日期前缀](为文章默认文件名加上日期前缀.png \"为文章默认文件名加上日期前缀\")\n\n所以上图中与Markdown文件同名的文件夹又是哪里来的呢, 参见下一小节.\n\n## 开启文章资源文件夹\n\n```yaml\npost_asset_folder: true\n```\n\n开启了[文章资源文件夹](https://hexo.io/zh-cn/docs/asset-folders.html)这个选项后, 我们在运行`hexo new \"文章标题\"`命令时, Hexo会在新建Markdown文件的同时创建同名目录, 用来存放每篇文章所引用的资源, 这也同样是为了便于针对不同的文章分类管理资源文件.\n\n资源具体可以是图片, CSS, JS文件等等, 不过笔者目前也只用到了图片. 下面就举一个本地图片插入的例子.\n\n```markdown\n![示例图片替代文本](示例图片.jpg \"示例图片标题\")\n```\n\n![\"示例图片替代文本](示例图片.jpg \"示例图片标题\")\n\n>2018/04/29更新:\n上面的写法只在文章页面生效, 如果需要让图片在博客首页也能正常显示, 需要使用Hexo内置的插件语法:\n```markdown\n{% asset_img 示例图片.jpg 示例图片标题 %}\n```\n\n~~没错, 配合资源文件夹, 直接用标准的Markdown语法就可以做到, 无需插件. 相对路径中的斜杠`\\`和反斜杠`/`均亲测可用, 也没有遇到官方文档中提到的*首页可能无法正常显示图片*问题.~~\n\n~~笔者如此执着于Markdown标准语法, 是为了让文章的编辑能尽量做到所见即所得, 而不是彻底敲了代码再看输出. 配合[Typora](https://typora.io/)的插入图片功能及其优先使用相对路径选项, 只需要手动填写标题和代替文本即可, 笔者选择保持两者与图片文件名一致.~~\n\n## 解决引号半角变全角\n\n本地文章里英文半角的单引号`'`跟双引号`\"`在生成博客之后居然变成中文全角的`’`跟`“`了, 这还得了, 经过一番折腾以及对照后发现居然还不是主题以及站点的语言配置原因, 差点又怀疑人生, 所幸找到了Hexo的[issue#1981](https://github.com/hexojs/hexo/issues/1981), 看到了Hexo作者tommy351大神早在2016年轻描淡写的一句\"试试看\". 解决方案如下, 添加Marked渲染器配置字段:\n\n```yaml\nmarked:\n  smartypants: false\n```\n\n## 添加站点404页面\n\n404页面是当前网站下找不到链接对应内容的跳转页面, 一般要么是链接写错了要么是网站文件丢了. 如果不自己写,  也不是就没有这个页面, 而是会显示GitHub的404页面, 倒不是说不好看, 但是跟博客风格不统一, 还是不太好.\n\n在博客根目录`blogname`下运行`hexo new page 404`, 然后打开`blogname\\source\\404\\index.md`进行如下修改: \n\n```yaml\n---\ntitle: 404 Not Found <!-- 页面标题 -->\ndate: 2018-04-21 13:51:57\npermalink: /404 <!-- 永久链接 -->\n---\n```\n\n以上是`index.md`文件的头部, 后面的内容就跟写文章一样了, 在距\"找不到页面\"离题不远的范围内自由发挥即可.\n\n> 如需使用前文中的方法引用资源文件, 同样把文件放在`blogname\\source\\404\\index`目录下, 但相对路径要用`404\\index\\资源文件名`.\n\n## 使用NexT主题\n\n### 安装\n\n在`blogname`根目录下运行`git clone https://github.com/theme-next/hexo-theme-next themes/next` \n\n### 更新\n\n在`blogname\\themes\\next`目录下运行`git pull`\n\n### 开启\n\n修改**站点**配置文件, 将`theme`字段改为`next`\n\n```yaml\ntheme: next\n```\n# NexT 主题配置\n\n## 主题配置文件\n\n**主题**配置文件在`blogname\\themes\\next`下, 而**站点**配置文件在`blogname`根目录下, 注意区分. 下文的配置修改, 如无特殊说明, 均在**主题配置文件**(下图**左**)中操作.\n\n![注意区分站点配置和主题配置](注意区分站点配置和主题配置.png \"注意区分站点配置和主题配置\")\n\n> 笔者创建本文时, NexT主题的[新官网](https://theme-next.org/)仍然在建, 所以绝大多数配置参考自[旧版文档](https://theme-next.iissnan.com/theme-settings.html)和网络上更早的相关博文. 希望等全新的NexT网站建设完毕之后可以看到更多更详细的文(玩)档(法).\n\n## 修改汉化配置\n\n`blogname\\themes\\next\\languages`目录下存放的是NexT的多语言适配文件. 配合Hexo的站点语言配置, 我们可以修改其中的内容来实现一些多语言适配的修改, 如`zh-CN.yml`文件中的`symbol`字段`comma` `period` `colon`分别对应逗号句号和冒号, 笔者习惯使用英文符号, 所以做了如下修改:\n\n```yaml\nsymbol:\n  comma: \", \"\n  period: \". \"\n  colon: \": \"\n```\n\n当然这里只是根据个人口味酌情修改.\n\n## 修改网站图标\n\n把新图标文件放到`blogname\\themes\\next\\source\\images`目录下, 并修改`facicon`的`small`和`medium`即可.\n\n```yaml\nfavicon:\n  # small: /images/favicon-16x16-next.png\n  # medium: /images/favicon-32x32-next.png\n  small: /images/sakamoto.png\n  medium: /images/sakamoto.png\n```\n\n效果如下: \n\n![网站图标](网站图标.png \"网站图标\")\n\n## 修改网站页脚\n\n先上效果图: \n\n![网站页脚](网站页脚.png \"网站页脚\")\n\n以下均为`footer`段内内容, 注意两个空格缩进.\n\n### 设定建站年份\n\n```yaml\nfooter:\n  # 其他字段\n  since: 2018\n```\n\n> 如不设定则直接显示当前年份, 这样就不会有`© 20XX - 20XX`字样了.\n\n### 修改分隔图标\n\n这个图标的作用是分隔建站年份跟右边的版权信息. 图标名称参见[Font Awesome](https://fontawesome.com/icons).\n\n```yaml\nfooter:\n  # 其他字段\n  icon:\n    name: paper-plane  # 图标名称\n    animated: false  # 是否开启跳动动画\n    color: \"#808080\" # 十六进制颜色代码\n```\n\n> 比如`heart` `true` `#ff0000`这个组合效果是跳动的红心.\n\n### 增加托管信息\n\n```yaml\nfooter:\n  # 其他字段\n  custom_text: Hosted by <a target=\"_blank\" rel=\"external nofollow\" href=\"https://pages.github.com/\">GitHub Pages</a>\n```\n\n饮水思源, 表明博客站点托管于GitHub Pages服务.\n\n## 修改文章末尾\n\n先上效果图:\n\n![文章末尾](文章末尾.png \"文章末尾\")\n\n> 这里的本文链接来自于**站点配置**中的站点链接`url`(前面做过修改)和文章链接`permalink`(使用默认值).\n\n### 设定版权信息\n\n设定并开启文章的版权声明, 会在每一篇文章末尾显示. 笔者选择的是大多数个人博客的版权协议[CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh).\n\n```yaml\npost_copyright:\n  enable: true\n  license: <a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>\n```\n\n### 修改标签图标\n\n把文章标签前面默认的`#`符号替换为Font Awesome中的Tag图标\n\n修改主题布局模板`blogname\\themes\\next\\layout\\_macro\\post.swig`文件, 搜索`rel=\"tag\">#`并将其替换为`rel=\"tag\"><i class=\"fa fa-tag\"></i>`\n\n## 修改侧边栏\n\n![侧边栏](侧边栏.png \"侧边栏\")\n\n<center>侧边栏效果图</center>\n\n### 添加博主头像\n\n将头像文件放到`blogname\\themes\\next\\source\\images`中, 并修改`avatar`字段:\n\n```yaml\navatar: /images/头像文件名\n```\n\n### 添加社交链接\n\n添加链接及图标(仍然参见[Font Awesome](https://fontawesome.com/icons)), 用 `||` 隔开:\n\n```yaml\nsocial:\n  GitHub: https://github.com/yourname || github\n  Google: https://plus.google.com/yourname || google\n```\n\n如需加密社交链接, 要先开启**两处**依赖项`exturl`, 并对链接进行[Base64加密](https://www.base64encode.org/)后填入字段.\n\n```yaml\nexturl: true\n```\n## 移动端配置\n\n### 统一开启侧边栏及返回顶部按钮\n\n这样做的好处是各平台阅读体验能得到统一, 否则移动端看不到侧边栏, 既没有文章目录方便跳转, 也没有社交链接联系博主, 也没有快速返回顶部的按钮.\n\n```yaml\nsidebar:\n  onmobile: true\n```\n\n>  不过需要注意: 该选项仅适用于NexT主题的Muse和Mist两个样式.\n\n### Android Chrome 网站主题色\n\n```yaml\nandroid_chrome_color: \"#fff\"  # 白色\n```\n\n这里的颜色可以参考[Material Design](https://material.io/guidelines/style/color.html#color-color-palette), 不过博主只简单把默认的黑色改成了白色.\n\n## 文章阅读进度条\n\n![文章阅读进度条](文章阅读进度条.png \"文章阅读进度条\")\n\n个人觉得这个插件还是很实用且美观的~\n\n### 安装\n\n在`blogname`根目录下运行: \n\n```bash\ngit clone https://github.com/theme-next/theme-next-reading-progress themes/next/source/lib/reading_progress\n```\n\n### 更新\n\n在`blogname\\themes\\next\\source\\lib\\reading_progress`目录下运行`git pull`即可.\n\n### 开启并配置\n\n```yaml\nreading_progress:\n  enable: true\n  color: \"#37c6c0\"  # 十六进制颜色代码, 默认挺好看的\n  height: 2px  # 进度条宽度, 默认为2像素, 可以适度调宽\n```\n\n## 网页3D动态背景\n\n### 安装\n\n在`blogname`根目录下运行: \n\n```bash\ngit clone https://github.com/theme-next/theme-next-three source/lib/three themes/next/source/lib/three\n```\n\n### 更新\n\n在`blogname\\themes\\next\\source\\lib\\three`目录下运行`git pull`即可.\n\n### 开启并配置\n\n以下三种动态背景只能选一个, 笔者三个都试过之后选了线条, 球面有点精神污染的意思.\n\n```yaml\nthree_waves: false\ncanvas_lines: true\ncanvas_sphere: false\n```\n\n","slug":"Hexo-and-NexT","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjgn3ozxw000aacfilexybk8d","content":"<blockquote>\n<p>配置修改提示: </p>\n<ul>\n<li>对照本文修改配置时, 应善用编辑器的<strong>查找</strong>功能<em>(Ctrl+F)</em>;</li>\n<li>注意YAML语法缩进, 冒号与参数间需两个空格隔开;</li>\n<li>建议修改前先把原有的语句备份注释<em>(一般是Ctrl+/)</em>.</li>\n</ul>\n</blockquote>\n<h1 id=\"Hexo-站点配置\"><a href=\"#Hexo-站点配置\" class=\"headerlink\" title=\"Hexo 站点配置\"></a>Hexo 站点配置</h1><p>照例先上官中<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">配置文档</a>, 通常这意味着本章节内容远不及官方文档全面, 而更倾向于个人的改动和见解.</p>\n<h2 id=\"站点配置文件\"><a href=\"#站点配置文件\" class=\"headerlink\" title=\"站点配置文件\"></a>站点配置文件</h2><p><a href=\"https://liolok.github.io/2018/04/14/Hexo-GitHub-Pages/#创建一个博客\">创建</a>博客<code>blogname</code>完成后, 站点配置信息位于<code>blogname\\_config.yml</code>文件(下图<strong>右</strong>)中, 本章节的配置修改, 如无特殊说明, 均在<strong>站点配置文件</strong>中操作.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/注意区分站点配置和主题配置.png\" alt=\"注意区分站点配置和主题配置\" title=\"注意区分站点配置和主题配置\"></p>\n<h2 id=\"修改站点语言和时区\"><a href=\"#修改站点语言和时区\" class=\"headerlink\" title=\"修改站点语言和时区\"></a>修改站点语言和时区</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n<p><code>language</code>, 语言字段, 填写<code>zh-CN</code>以适配NexT主题的简体中文. (参见NexT的<a href=\"https://github.com/theme-next/hexo-theme-next/commit/e1e6cf8fe0e0b6f22fed22e766019be74f83de5d\" target=\"_blank\" rel=\"noopener\">commit#e1e6cf8</a>)</p>\n<blockquote>\n<p>注: 不填写默认为<code>en</code>即英文, 也是可以的, 这完全取决于你喜欢英文还是方块字, 与文章的语言无关.</p>\n</blockquote>\n<p><code>timezone</code>, 时区字段, 填写<code>Asia/Shanghai</code>. (参见维基的<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>)</p>\n<blockquote>\n<p>注: 如果不填写该字段, Hexo会默认使用电脑的时区, 但此处的&quot;电脑&quot;是GitHub的美国服务器还是本机, 笔者尚不能确定, 只好确保时区信息正确.</p>\n</blockquote>\n<h2 id=\"修改站点的网站链接\"><a href=\"#修改站点的网站链接\" class=\"headerlink\" title=\"修改站点的网站链接\"></a>修改站点的网站链接</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://liolok.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n<p><code>url</code>是站点所在的网址, <code>root</code>则是当站点被放在网站子目录下时指定子目录的. 如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://liolok.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改文章默认文件名\"><a href=\"#修改文章默认文件名\" class=\"headerlink\" title=\"修改文章默认文件名\"></a>修改文章默认文件名</h2><p>这个要从博客目录下的<code>hexo new &quot;文章标题&quot;</code>说起, 这条命令会在<code>source\\_post</code>目录下新建一个与Markdown文件, 我们就在这个文件里进行写作. 但是文章数量多起来之后这个目录恐怕会十分混乱. </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br></pre></td></tr></table></figure>\n<p><code>new_post_name</code>, 文章默认文件名, 将默认的<code>title.md</code>改为<code>:year-:month-:day-:title.md</code>, 这样一来, <code>source\\_post</code>目录下的文件(文件夹)命名就有了日期前缀而不是只有标题了, 方便本地文章的管理.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/为文章默认文件名加上日期前缀.png\" alt=\"为文章默认文件名加上日期前缀\" title=\"为文章默认文件名加上日期前缀\"></p>\n<p>所以上图中与Markdown文件同名的文件夹又是哪里来的呢, 参见下一小节.</p>\n<h2 id=\"开启文章资源文件夹\"><a href=\"#开启文章资源文件夹\" class=\"headerlink\" title=\"开启文章资源文件夹\"></a>开启文章资源文件夹</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>开启了<a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">文章资源文件夹</a>这个选项后, 我们在运行<code>hexo new &quot;文章标题&quot;</code>命令时, Hexo会在新建Markdown文件的同时创建同名目录, 用来存放每篇文章所引用的资源, 这也同样是为了便于针对不同的文章分类管理资源文件.</p>\n<p>资源具体可以是图片, CSS, JS文件等等, 不过笔者目前也只用到了图片. 下面就举一个本地图片插入的例子.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">示例图片替代文本</span>](<span class=\"link\">示例图片.jpg \"示例图片标题\"</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/示例图片.jpg\" alt=\"&quot;示例图片替代文本\" title=\"示例图片标题\"></p>\n<blockquote>\n<p>2018/04/29更新:<br>上面的写法只在文章页面生效, 如果需要让图片在博客首页也能正常显示, 需要使用Hexo内置的插件语法:<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 示例图片.jpg 示例图片标题 %&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><del>没错, 配合资源文件夹, 直接用标准的Markdown语法就可以做到, 无需插件. 相对路径中的斜杠<code>\\</code>和反斜杠<code>/</code>均亲测可用, 也没有遇到官方文档中提到的<em>首页可能无法正常显示图片</em>问题.</del></p>\n<p><del>笔者如此执着于Markdown标准语法, 是为了让文章的编辑能尽量做到所见即所得, 而不是彻底敲了代码再看输出. 配合<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>的插入图片功能及其优先使用相对路径选项, 只需要手动填写标题和代替文本即可, 笔者选择保持两者与图片文件名一致.</del></p>\n<h2 id=\"解决引号半角变全角\"><a href=\"#解决引号半角变全角\" class=\"headerlink\" title=\"解决引号半角变全角\"></a>解决引号半角变全角</h2><p>本地文章里英文半角的单引号<code>&#39;</code>跟双引号<code>&quot;</code>在生成博客之后居然变成中文全角的<code>’</code>跟<code>“</code>了, 这还得了, 经过一番折腾以及对照后发现居然还不是主题以及站点的语言配置原因, 差点又怀疑人生, 所幸找到了Hexo的<a href=\"https://github.com/hexojs/hexo/issues/1981\" target=\"_blank\" rel=\"noopener\">issue#1981</a>, 看到了Hexo作者tommy351大神早在2016年轻描淡写的一句&quot;试试看&quot;. 解决方案如下, 添加Marked渲染器配置字段:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\"><span class=\"attr\">  smartypants:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加站点404页面\"><a href=\"#添加站点404页面\" class=\"headerlink\" title=\"添加站点404页面\"></a>添加站点404页面</h2><p>404页面是当前网站下找不到链接对应内容的跳转页面, 一般要么是链接写错了要么是网站文件丢了. 如果不自己写,  也不是就没有这个页面, 而是会显示GitHub的404页面, 倒不是说不好看, 但是跟博客风格不统一, 还是不太好.</p>\n<p>在博客根目录<code>blogname</code>下运行<code>hexo new page 404</code>, 然后打开<code>blogname\\source\\404\\index.md</code>进行如下修改: </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"number\">404</span> <span class=\"string\">Not</span> <span class=\"string\">Found</span> <span class=\"string\">&lt;!--</span> <span class=\"string\">页面标题</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018</span><span class=\"bullet\">-04</span><span class=\"bullet\">-21</span> <span class=\"number\">13</span><span class=\"string\">:51:57</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">/404</span> <span class=\"string\">&lt;!--</span> <span class=\"string\">永久链接</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>以上是<code>index.md</code>文件的头部, 后面的内容就跟写文章一样了, 在距&quot;找不到页面&quot;离题不远的范围内自由发挥即可.</p>\n<blockquote>\n<p>如需使用前文中的方法引用资源文件, 同样把文件放在<code>blogname\\source\\404\\index</code>目录下, 但相对路径要用<code>404\\index\\资源文件名</code>.</p>\n</blockquote>\n<h2 id=\"使用NexT主题\"><a href=\"#使用NexT主题\" class=\"headerlink\" title=\"使用NexT主题\"></a>使用NexT主题</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> </p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next</code>目录下运行<code>git pull</code></p>\n<h3 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h3><p>修改<strong>站点</strong>配置文件, 将<code>theme</code>字段改为<code>next</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"NexT-主题配置\"><a href=\"#NexT-主题配置\" class=\"headerlink\" title=\"NexT 主题配置\"></a>NexT 主题配置</h1><h2 id=\"主题配置文件\"><a href=\"#主题配置文件\" class=\"headerlink\" title=\"主题配置文件\"></a>主题配置文件</h2><p><strong>主题</strong>配置文件在<code>blogname\\themes\\next</code>下, 而<strong>站点</strong>配置文件在<code>blogname</code>根目录下, 注意区分. 下文的配置修改, 如无特殊说明, 均在<strong>主题配置文件</strong>(下图<strong>左</strong>)中操作.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/注意区分站点配置和主题配置.png\" alt=\"注意区分站点配置和主题配置\" title=\"注意区分站点配置和主题配置\"></p>\n<blockquote>\n<p>笔者创建本文时, NexT主题的<a href=\"https://theme-next.org/\" target=\"_blank\" rel=\"noopener\">新官网</a>仍然在建, 所以绝大多数配置参考自<a href=\"https://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">旧版文档</a>和网络上更早的相关博文. 希望等全新的NexT网站建设完毕之后可以看到更多更详细的文(玩)档(法).</p>\n</blockquote>\n<h2 id=\"修改汉化配置\"><a href=\"#修改汉化配置\" class=\"headerlink\" title=\"修改汉化配置\"></a>修改汉化配置</h2><p><code>blogname\\themes\\next\\languages</code>目录下存放的是NexT的多语言适配文件. 配合Hexo的站点语言配置, 我们可以修改其中的内容来实现一些多语言适配的修改, 如<code>zh-CN.yml</code>文件中的<code>symbol</code>字段<code>comma</code> <code>period</code> <code>colon</code>分别对应逗号句号和冒号, 笔者习惯使用英文符号, 所以做了如下修改:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbol:</span></span><br><span class=\"line\"><span class=\"attr\">  comma:</span> <span class=\"string\">\", \"</span></span><br><span class=\"line\"><span class=\"attr\">  period:</span> <span class=\"string\">\". \"</span></span><br><span class=\"line\"><span class=\"attr\">  colon:</span> <span class=\"string\">\": \"</span></span><br></pre></td></tr></table></figure>\n<p>当然这里只是根据个人口味酌情修改.</p>\n<h2 id=\"修改网站图标\"><a href=\"#修改网站图标\" class=\"headerlink\" title=\"修改网站图标\"></a>修改网站图标</h2><p>把新图标文件放到<code>blogname\\themes\\next\\source\\images</code>目录下, 并修改<code>facicon</code>的<code>small</code>和<code>medium</code>即可.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"comment\"># small: /images/favicon-16x16-next.png</span></span><br><span class=\"line\">  <span class=\"comment\"># medium: /images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/sakamoto.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/sakamoto.png</span></span><br></pre></td></tr></table></figure>\n<p>效果如下: </p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/网站图标.png\" alt=\"网站图标\" title=\"网站图标\"></p>\n<h2 id=\"修改网站页脚\"><a href=\"#修改网站页脚\" class=\"headerlink\" title=\"修改网站页脚\"></a>修改网站页脚</h2><p>先上效果图: </p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/网站页脚.png\" alt=\"网站页脚\" title=\"网站页脚\"></p>\n<p>以下均为<code>footer</code>段内内容, 注意两个空格缩进.</p>\n<h3 id=\"设定建站年份\"><a href=\"#设定建站年份\" class=\"headerlink\" title=\"设定建站年份\"></a>设定建站年份</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  since:</span> <span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如不设定则直接显示当前年份, 这样就不会有<code>© 20XX - 20XX</code>字样了.</p>\n</blockquote>\n<h3 id=\"修改分隔图标\"><a href=\"#修改分隔图标\" class=\"headerlink\" title=\"修改分隔图标\"></a>修改分隔图标</h3><p>这个图标的作用是分隔建站年份跟右边的版权信息. 图标名称参见<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  icon:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">paper-plane</span>  <span class=\"comment\"># 图标名称</span></span><br><span class=\"line\"><span class=\"attr\">    animated:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 是否开启跳动动画</span></span><br><span class=\"line\"><span class=\"attr\">    color:</span> <span class=\"string\">\"#808080\"</span> <span class=\"comment\"># 十六进制颜色代码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如<code>heart</code> <code>true</code> <code>#ff0000</code>这个组合效果是跳动的红心.</p>\n</blockquote>\n<h3 id=\"增加托管信息\"><a href=\"#增加托管信息\" class=\"headerlink\" title=\"增加托管信息\"></a>增加托管信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  custom_text:</span> <span class=\"string\">Hosted</span> <span class=\"string\">by</span> <span class=\"string\">&lt;a</span> <span class=\"string\">target=\"_blank\"</span> <span class=\"string\">rel=\"external</span> <span class=\"string\">nofollow\"</span> <span class=\"string\">href=\"https://pages.github.com/\"&gt;GitHub</span> <span class=\"string\">Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<p>饮水思源, 表明博客站点托管于GitHub Pages服务.</p>\n<h2 id=\"修改文章末尾\"><a href=\"#修改文章末尾\" class=\"headerlink\" title=\"修改文章末尾\"></a>修改文章末尾</h2><p>先上效果图:</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/文章末尾.png\" alt=\"文章末尾\" title=\"文章末尾\"></p>\n<blockquote>\n<p>这里的本文链接来自于<strong>站点配置</strong>中的站点链接<code>url</code>(前面做过修改)和文章链接<code>permalink</code>(使用默认值).</p>\n</blockquote>\n<h3 id=\"设定版权信息\"><a href=\"#设定版权信息\" class=\"headerlink\" title=\"设定版权信息\"></a>设定版权信息</h3><p>设定并开启文章的版权声明, 会在每一篇文章末尾显示. 笔者选择的是大多数个人博客的版权协议<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC BY-NC-ND 4.0</a>.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_copyright:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">&lt;a</span> <span class=\"string\">href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> <span class=\"string\">rel=\"external</span> <span class=\"string\">nofollow\"</span> <span class=\"string\">target=\"_blank\"&gt;CC</span> <span class=\"string\">BY-NC-ND</span> <span class=\"number\">4.0</span><span class=\"string\">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改标签图标\"><a href=\"#修改标签图标\" class=\"headerlink\" title=\"修改标签图标\"></a>修改标签图标</h3><p>把文章标签前面默认的<code>#</code>符号替换为Font Awesome中的Tag图标</p>\n<p>修改主题布局模板<code>blogname\\themes\\next\\layout\\_macro\\post.swig</code>文件, 搜索<code>rel=&quot;tag&quot;&gt;#</code>并将其替换为<code>rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h2 id=\"修改侧边栏\"><a href=\"#修改侧边栏\" class=\"headerlink\" title=\"修改侧边栏\"></a>修改侧边栏</h2><p><img src=\"/2018/04/23/Hexo-and-NexT/侧边栏.png\" alt=\"侧边栏\" title=\"侧边栏\"></p>\n<center>侧边栏效果图</center>\n\n<h3 id=\"添加博主头像\"><a href=\"#添加博主头像\" class=\"headerlink\" title=\"添加博主头像\"></a>添加博主头像</h3><p>将头像文件放到<code>blogname\\themes\\next\\source\\images</code>中, 并修改<code>avatar</code>字段:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/images/头像文件名</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加社交链接\"><a href=\"#添加社交链接\" class=\"headerlink\" title=\"添加社交链接\"></a>添加社交链接</h3><p>添加链接及图标(仍然参见<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>), 用 <code>||</code> 隔开:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  Google:</span> <span class=\"attr\">https://plus.google.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">google</span></span><br></pre></td></tr></table></figure>\n<p>如需加密社交链接, 要先开启<strong>两处</strong>依赖项<code>exturl</code>, 并对链接进行<a href=\"https://www.base64encode.org/\" target=\"_blank\" rel=\"noopener\">Base64加密</a>后填入字段.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">exturl:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端配置\"><a href=\"#移动端配置\" class=\"headerlink\" title=\"移动端配置\"></a>移动端配置</h2><h3 id=\"统一开启侧边栏及返回顶部按钮\"><a href=\"#统一开启侧边栏及返回顶部按钮\" class=\"headerlink\" title=\"统一开启侧边栏及返回顶部按钮\"></a>统一开启侧边栏及返回顶部按钮</h3><p>这样做的好处是各平台阅读体验能得到统一, 否则移动端看不到侧边栏, 既没有文章目录方便跳转, 也没有社交链接联系博主, 也没有快速返回顶部的按钮.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 不过需要注意: 该选项仅适用于NexT主题的Muse和Mist两个样式.</p>\n</blockquote>\n<h3 id=\"Android-Chrome-网站主题色\"><a href=\"#Android-Chrome-网站主题色\" class=\"headerlink\" title=\"Android Chrome 网站主题色\"></a>Android Chrome 网站主题色</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">android_chrome_color:</span> <span class=\"string\">\"#fff\"</span>  <span class=\"comment\"># 白色</span></span><br></pre></td></tr></table></figure>\n<p>这里的颜色可以参考<a href=\"https://material.io/guidelines/style/color.html#color-color-palette\" target=\"_blank\" rel=\"noopener\">Material Design</a>, 不过博主只简单把默认的黑色改成了白色.</p>\n<h2 id=\"文章阅读进度条\"><a href=\"#文章阅读进度条\" class=\"headerlink\" title=\"文章阅读进度条\"></a>文章阅读进度条</h2><p><img src=\"/2018/04/23/Hexo-and-NexT/文章阅读进度条.png\" alt=\"文章阅读进度条\" title=\"文章阅读进度条\"></p>\n<p>个人觉得这个插件还是很实用且美观的~</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-reading-progress themes/next/<span class=\"built_in\">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-1\"><a href=\"#更新-1\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next\\source\\lib\\reading_progress</code>目录下运行<code>git pull</code>即可.</p>\n<h3 id=\"开启并配置\"><a href=\"#开启并配置\" class=\"headerlink\" title=\"开启并配置\"></a>开启并配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">\"#37c6c0\"</span>  <span class=\"comment\"># 十六进制颜色代码, 默认挺好看的</span></span><br><span class=\"line\"><span class=\"attr\">  height:</span> <span class=\"number\">2</span><span class=\"string\">px</span>  <span class=\"comment\"># 进度条宽度, 默认为2像素, 可以适度调宽</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"网页3D动态背景\"><a href=\"#网页3D动态背景\" class=\"headerlink\" title=\"网页3D动态背景\"></a>网页3D动态背景</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-three <span class=\"built_in\">source</span>/lib/three themes/next/<span class=\"built_in\">source</span>/lib/three</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-2\"><a href=\"#更新-2\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next\\source\\lib\\three</code>目录下运行<code>git pull</code>即可.</p>\n<h3 id=\"开启并配置-1\"><a href=\"#开启并配置-1\" class=\"headerlink\" title=\"开启并配置\"></a>开启并配置</h3><p>以下三种动态背景只能选一个, 笔者三个都试过之后选了线条, 球面有点精神污染的意思.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>配置修改提示: </p>\n<ul>\n<li>对照本文修改配置时, 应善用编辑器的<strong>查找</strong>功能<em>(Ctrl+F)</em>;</li>\n<li>注意YAML语法缩进, 冒号与参数间需两个空格隔开;</li>\n<li>建议修改前先把原有的语句备份注释<em>(一般是Ctrl+/)</em>.</li>\n</ul>\n</blockquote>\n<h1 id=\"Hexo-站点配置\"><a href=\"#Hexo-站点配置\" class=\"headerlink\" title=\"Hexo 站点配置\"></a>Hexo 站点配置</h1><p>照例先上官中<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">配置文档</a>, 通常这意味着本章节内容远不及官方文档全面, 而更倾向于个人的改动和见解.</p>\n<h2 id=\"站点配置文件\"><a href=\"#站点配置文件\" class=\"headerlink\" title=\"站点配置文件\"></a>站点配置文件</h2><p><a href=\"https://liolok.github.io/2018/04/14/Hexo-GitHub-Pages/#创建一个博客\">创建</a>博客<code>blogname</code>完成后, 站点配置信息位于<code>blogname\\_config.yml</code>文件(下图<strong>右</strong>)中, 本章节的配置修改, 如无特殊说明, 均在<strong>站点配置文件</strong>中操作.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/注意区分站点配置和主题配置.png\" alt=\"注意区分站点配置和主题配置\" title=\"注意区分站点配置和主题配置\"></p>\n<h2 id=\"修改站点语言和时区\"><a href=\"#修改站点语言和时区\" class=\"headerlink\" title=\"修改站点语言和时区\"></a>修改站点语言和时区</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>\n<p><code>language</code>, 语言字段, 填写<code>zh-CN</code>以适配NexT主题的简体中文. (参见NexT的<a href=\"https://github.com/theme-next/hexo-theme-next/commit/e1e6cf8fe0e0b6f22fed22e766019be74f83de5d\" target=\"_blank\" rel=\"noopener\">commit#e1e6cf8</a>)</p>\n<blockquote>\n<p>注: 不填写默认为<code>en</code>即英文, 也是可以的, 这完全取决于你喜欢英文还是方块字, 与文章的语言无关.</p>\n</blockquote>\n<p><code>timezone</code>, 时区字段, 填写<code>Asia/Shanghai</code>. (参见维基的<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>)</p>\n<blockquote>\n<p>注: 如果不填写该字段, Hexo会默认使用电脑的时区, 但此处的&quot;电脑&quot;是GitHub的美国服务器还是本机, 笔者尚不能确定, 只好确保时区信息正确.</p>\n</blockquote>\n<h2 id=\"修改站点的网站链接\"><a href=\"#修改站点的网站链接\" class=\"headerlink\" title=\"修改站点的网站链接\"></a>修改站点的网站链接</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://liolok.github.io/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n<p><code>url</code>是站点所在的网址, <code>root</code>则是当站点被放在网站子目录下时指定子目录的. 如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://liolok.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改文章默认文件名\"><a href=\"#修改文章默认文件名\" class=\"headerlink\" title=\"修改文章默认文件名\"></a>修改文章默认文件名</h2><p>这个要从博客目录下的<code>hexo new &quot;文章标题&quot;</code>说起, 这条命令会在<code>source\\_post</code>目录下新建一个与Markdown文件, 我们就在这个文件里进行写作. 但是文章数量多起来之后这个目录恐怕会十分混乱. </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br></pre></td></tr></table></figure>\n<p><code>new_post_name</code>, 文章默认文件名, 将默认的<code>title.md</code>改为<code>:year-:month-:day-:title.md</code>, 这样一来, <code>source\\_post</code>目录下的文件(文件夹)命名就有了日期前缀而不是只有标题了, 方便本地文章的管理.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/为文章默认文件名加上日期前缀.png\" alt=\"为文章默认文件名加上日期前缀\" title=\"为文章默认文件名加上日期前缀\"></p>\n<p>所以上图中与Markdown文件同名的文件夹又是哪里来的呢, 参见下一小节.</p>\n<h2 id=\"开启文章资源文件夹\"><a href=\"#开启文章资源文件夹\" class=\"headerlink\" title=\"开启文章资源文件夹\"></a>开启文章资源文件夹</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>开启了<a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">文章资源文件夹</a>这个选项后, 我们在运行<code>hexo new &quot;文章标题&quot;</code>命令时, Hexo会在新建Markdown文件的同时创建同名目录, 用来存放每篇文章所引用的资源, 这也同样是为了便于针对不同的文章分类管理资源文件.</p>\n<p>资源具体可以是图片, CSS, JS文件等等, 不过笔者目前也只用到了图片. 下面就举一个本地图片插入的例子.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">示例图片替代文本</span>](<span class=\"link\">示例图片.jpg \"示例图片标题\"</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/示例图片.jpg\" alt=\"&quot;示例图片替代文本\" title=\"示例图片标题\"></p>\n<blockquote>\n<p>2018/04/29更新:<br>上面的写法只在文章页面生效, 如果需要让图片在博客首页也能正常显示, 需要使用Hexo内置的插件语法:<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 示例图片.jpg 示例图片标题 %&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><del>没错, 配合资源文件夹, 直接用标准的Markdown语法就可以做到, 无需插件. 相对路径中的斜杠<code>\\</code>和反斜杠<code>/</code>均亲测可用, 也没有遇到官方文档中提到的<em>首页可能无法正常显示图片</em>问题.</del></p>\n<p><del>笔者如此执着于Markdown标准语法, 是为了让文章的编辑能尽量做到所见即所得, 而不是彻底敲了代码再看输出. 配合<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>的插入图片功能及其优先使用相对路径选项, 只需要手动填写标题和代替文本即可, 笔者选择保持两者与图片文件名一致.</del></p>\n<h2 id=\"解决引号半角变全角\"><a href=\"#解决引号半角变全角\" class=\"headerlink\" title=\"解决引号半角变全角\"></a>解决引号半角变全角</h2><p>本地文章里英文半角的单引号<code>&#39;</code>跟双引号<code>&quot;</code>在生成博客之后居然变成中文全角的<code>’</code>跟<code>“</code>了, 这还得了, 经过一番折腾以及对照后发现居然还不是主题以及站点的语言配置原因, 差点又怀疑人生, 所幸找到了Hexo的<a href=\"https://github.com/hexojs/hexo/issues/1981\" target=\"_blank\" rel=\"noopener\">issue#1981</a>, 看到了Hexo作者tommy351大神早在2016年轻描淡写的一句&quot;试试看&quot;. 解决方案如下, 添加Marked渲染器配置字段:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\"><span class=\"attr\">  smartypants:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加站点404页面\"><a href=\"#添加站点404页面\" class=\"headerlink\" title=\"添加站点404页面\"></a>添加站点404页面</h2><p>404页面是当前网站下找不到链接对应内容的跳转页面, 一般要么是链接写错了要么是网站文件丢了. 如果不自己写,  也不是就没有这个页面, 而是会显示GitHub的404页面, 倒不是说不好看, 但是跟博客风格不统一, 还是不太好.</p>\n<p>在博客根目录<code>blogname</code>下运行<code>hexo new page 404</code>, 然后打开<code>blogname\\source\\404\\index.md</code>进行如下修改: </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"number\">404</span> <span class=\"string\">Not</span> <span class=\"string\">Found</span> <span class=\"string\">&lt;!--</span> <span class=\"string\">页面标题</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018</span><span class=\"bullet\">-04</span><span class=\"bullet\">-21</span> <span class=\"number\">13</span><span class=\"string\">:51:57</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">/404</span> <span class=\"string\">&lt;!--</span> <span class=\"string\">永久链接</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>以上是<code>index.md</code>文件的头部, 后面的内容就跟写文章一样了, 在距&quot;找不到页面&quot;离题不远的范围内自由发挥即可.</p>\n<blockquote>\n<p>如需使用前文中的方法引用资源文件, 同样把文件放在<code>blogname\\source\\404\\index</code>目录下, 但相对路径要用<code>404\\index\\资源文件名</code>.</p>\n</blockquote>\n<h2 id=\"使用NexT主题\"><a href=\"#使用NexT主题\" class=\"headerlink\" title=\"使用NexT主题\"></a>使用NexT主题</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> </p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next</code>目录下运行<code>git pull</code></p>\n<h3 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h3><p>修改<strong>站点</strong>配置文件, 将<code>theme</code>字段改为<code>next</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"NexT-主题配置\"><a href=\"#NexT-主题配置\" class=\"headerlink\" title=\"NexT 主题配置\"></a>NexT 主题配置</h1><h2 id=\"主题配置文件\"><a href=\"#主题配置文件\" class=\"headerlink\" title=\"主题配置文件\"></a>主题配置文件</h2><p><strong>主题</strong>配置文件在<code>blogname\\themes\\next</code>下, 而<strong>站点</strong>配置文件在<code>blogname</code>根目录下, 注意区分. 下文的配置修改, 如无特殊说明, 均在<strong>主题配置文件</strong>(下图<strong>左</strong>)中操作.</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/注意区分站点配置和主题配置.png\" alt=\"注意区分站点配置和主题配置\" title=\"注意区分站点配置和主题配置\"></p>\n<blockquote>\n<p>笔者创建本文时, NexT主题的<a href=\"https://theme-next.org/\" target=\"_blank\" rel=\"noopener\">新官网</a>仍然在建, 所以绝大多数配置参考自<a href=\"https://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">旧版文档</a>和网络上更早的相关博文. 希望等全新的NexT网站建设完毕之后可以看到更多更详细的文(玩)档(法).</p>\n</blockquote>\n<h2 id=\"修改汉化配置\"><a href=\"#修改汉化配置\" class=\"headerlink\" title=\"修改汉化配置\"></a>修改汉化配置</h2><p><code>blogname\\themes\\next\\languages</code>目录下存放的是NexT的多语言适配文件. 配合Hexo的站点语言配置, 我们可以修改其中的内容来实现一些多语言适配的修改, 如<code>zh-CN.yml</code>文件中的<code>symbol</code>字段<code>comma</code> <code>period</code> <code>colon</code>分别对应逗号句号和冒号, 笔者习惯使用英文符号, 所以做了如下修改:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbol:</span></span><br><span class=\"line\"><span class=\"attr\">  comma:</span> <span class=\"string\">\", \"</span></span><br><span class=\"line\"><span class=\"attr\">  period:</span> <span class=\"string\">\". \"</span></span><br><span class=\"line\"><span class=\"attr\">  colon:</span> <span class=\"string\">\": \"</span></span><br></pre></td></tr></table></figure>\n<p>当然这里只是根据个人口味酌情修改.</p>\n<h2 id=\"修改网站图标\"><a href=\"#修改网站图标\" class=\"headerlink\" title=\"修改网站图标\"></a>修改网站图标</h2><p>把新图标文件放到<code>blogname\\themes\\next\\source\\images</code>目录下, 并修改<code>facicon</code>的<code>small</code>和<code>medium</code>即可.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"comment\"># small: /images/favicon-16x16-next.png</span></span><br><span class=\"line\">  <span class=\"comment\"># medium: /images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">  small:</span> <span class=\"string\">/images/sakamoto.png</span></span><br><span class=\"line\"><span class=\"attr\">  medium:</span> <span class=\"string\">/images/sakamoto.png</span></span><br></pre></td></tr></table></figure>\n<p>效果如下: </p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/网站图标.png\" alt=\"网站图标\" title=\"网站图标\"></p>\n<h2 id=\"修改网站页脚\"><a href=\"#修改网站页脚\" class=\"headerlink\" title=\"修改网站页脚\"></a>修改网站页脚</h2><p>先上效果图: </p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/网站页脚.png\" alt=\"网站页脚\" title=\"网站页脚\"></p>\n<p>以下均为<code>footer</code>段内内容, 注意两个空格缩进.</p>\n<h3 id=\"设定建站年份\"><a href=\"#设定建站年份\" class=\"headerlink\" title=\"设定建站年份\"></a>设定建站年份</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  since:</span> <span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如不设定则直接显示当前年份, 这样就不会有<code>© 20XX - 20XX</code>字样了.</p>\n</blockquote>\n<h3 id=\"修改分隔图标\"><a href=\"#修改分隔图标\" class=\"headerlink\" title=\"修改分隔图标\"></a>修改分隔图标</h3><p>这个图标的作用是分隔建站年份跟右边的版权信息. 图标名称参见<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  icon:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">paper-plane</span>  <span class=\"comment\"># 图标名称</span></span><br><span class=\"line\"><span class=\"attr\">    animated:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 是否开启跳动动画</span></span><br><span class=\"line\"><span class=\"attr\">    color:</span> <span class=\"string\">\"#808080\"</span> <span class=\"comment\"># 十六进制颜色代码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比如<code>heart</code> <code>true</code> <code>#ff0000</code>这个组合效果是跳动的红心.</p>\n</blockquote>\n<h3 id=\"增加托管信息\"><a href=\"#增加托管信息\" class=\"headerlink\" title=\"增加托管信息\"></a>增加托管信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># 其他字段</span></span><br><span class=\"line\"><span class=\"attr\">  custom_text:</span> <span class=\"string\">Hosted</span> <span class=\"string\">by</span> <span class=\"string\">&lt;a</span> <span class=\"string\">target=\"_blank\"</span> <span class=\"string\">rel=\"external</span> <span class=\"string\">nofollow\"</span> <span class=\"string\">href=\"https://pages.github.com/\"&gt;GitHub</span> <span class=\"string\">Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<p>饮水思源, 表明博客站点托管于GitHub Pages服务.</p>\n<h2 id=\"修改文章末尾\"><a href=\"#修改文章末尾\" class=\"headerlink\" title=\"修改文章末尾\"></a>修改文章末尾</h2><p>先上效果图:</p>\n<p><img src=\"/2018/04/23/Hexo-and-NexT/文章末尾.png\" alt=\"文章末尾\" title=\"文章末尾\"></p>\n<blockquote>\n<p>这里的本文链接来自于<strong>站点配置</strong>中的站点链接<code>url</code>(前面做过修改)和文章链接<code>permalink</code>(使用默认值).</p>\n</blockquote>\n<h3 id=\"设定版权信息\"><a href=\"#设定版权信息\" class=\"headerlink\" title=\"设定版权信息\"></a>设定版权信息</h3><p>设定并开启文章的版权声明, 会在每一篇文章末尾显示. 笔者选择的是大多数个人博客的版权协议<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC BY-NC-ND 4.0</a>.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_copyright:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">&lt;a</span> <span class=\"string\">href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> <span class=\"string\">rel=\"external</span> <span class=\"string\">nofollow\"</span> <span class=\"string\">target=\"_blank\"&gt;CC</span> <span class=\"string\">BY-NC-ND</span> <span class=\"number\">4.0</span><span class=\"string\">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改标签图标\"><a href=\"#修改标签图标\" class=\"headerlink\" title=\"修改标签图标\"></a>修改标签图标</h3><p>把文章标签前面默认的<code>#</code>符号替换为Font Awesome中的Tag图标</p>\n<p>修改主题布局模板<code>blogname\\themes\\next\\layout\\_macro\\post.swig</code>文件, 搜索<code>rel=&quot;tag&quot;&gt;#</code>并将其替换为<code>rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h2 id=\"修改侧边栏\"><a href=\"#修改侧边栏\" class=\"headerlink\" title=\"修改侧边栏\"></a>修改侧边栏</h2><p><img src=\"/2018/04/23/Hexo-and-NexT/侧边栏.png\" alt=\"侧边栏\" title=\"侧边栏\"></p>\n<center>侧边栏效果图</center>\n\n<h3 id=\"添加博主头像\"><a href=\"#添加博主头像\" class=\"headerlink\" title=\"添加博主头像\"></a>添加博主头像</h3><p>将头像文件放到<code>blogname\\themes\\next\\source\\images</code>中, 并修改<code>avatar</code>字段:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/images/头像文件名</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加社交链接\"><a href=\"#添加社交链接\" class=\"headerlink\" title=\"添加社交链接\"></a>添加社交链接</h3><p>添加链接及图标(仍然参见<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>), 用 <code>||</code> 隔开:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  Google:</span> <span class=\"attr\">https://plus.google.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">google</span></span><br></pre></td></tr></table></figure>\n<p>如需加密社交链接, 要先开启<strong>两处</strong>依赖项<code>exturl</code>, 并对链接进行<a href=\"https://www.base64encode.org/\" target=\"_blank\" rel=\"noopener\">Base64加密</a>后填入字段.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">exturl:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端配置\"><a href=\"#移动端配置\" class=\"headerlink\" title=\"移动端配置\"></a>移动端配置</h2><h3 id=\"统一开启侧边栏及返回顶部按钮\"><a href=\"#统一开启侧边栏及返回顶部按钮\" class=\"headerlink\" title=\"统一开启侧边栏及返回顶部按钮\"></a>统一开启侧边栏及返回顶部按钮</h3><p>这样做的好处是各平台阅读体验能得到统一, 否则移动端看不到侧边栏, 既没有文章目录方便跳转, 也没有社交链接联系博主, 也没有快速返回顶部的按钮.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 不过需要注意: 该选项仅适用于NexT主题的Muse和Mist两个样式.</p>\n</blockquote>\n<h3 id=\"Android-Chrome-网站主题色\"><a href=\"#Android-Chrome-网站主题色\" class=\"headerlink\" title=\"Android Chrome 网站主题色\"></a>Android Chrome 网站主题色</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">android_chrome_color:</span> <span class=\"string\">\"#fff\"</span>  <span class=\"comment\"># 白色</span></span><br></pre></td></tr></table></figure>\n<p>这里的颜色可以参考<a href=\"https://material.io/guidelines/style/color.html#color-color-palette\" target=\"_blank\" rel=\"noopener\">Material Design</a>, 不过博主只简单把默认的黑色改成了白色.</p>\n<h2 id=\"文章阅读进度条\"><a href=\"#文章阅读进度条\" class=\"headerlink\" title=\"文章阅读进度条\"></a>文章阅读进度条</h2><p><img src=\"/2018/04/23/Hexo-and-NexT/文章阅读进度条.png\" alt=\"文章阅读进度条\" title=\"文章阅读进度条\"></p>\n<p>个人觉得这个插件还是很实用且美观的~</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-reading-progress themes/next/<span class=\"built_in\">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-1\"><a href=\"#更新-1\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next\\source\\lib\\reading_progress</code>目录下运行<code>git pull</code>即可.</p>\n<h3 id=\"开启并配置\"><a href=\"#开启并配置\" class=\"headerlink\" title=\"开启并配置\"></a>开启并配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">\"#37c6c0\"</span>  <span class=\"comment\"># 十六进制颜色代码, 默认挺好看的</span></span><br><span class=\"line\"><span class=\"attr\">  height:</span> <span class=\"number\">2</span><span class=\"string\">px</span>  <span class=\"comment\"># 进度条宽度, 默认为2像素, 可以适度调宽</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"网页3D动态背景\"><a href=\"#网页3D动态背景\" class=\"headerlink\" title=\"网页3D动态背景\"></a>网页3D动态背景</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在<code>blogname</code>根目录下运行: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-three <span class=\"built_in\">source</span>/lib/three themes/next/<span class=\"built_in\">source</span>/lib/three</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-2\"><a href=\"#更新-2\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>在<code>blogname\\themes\\next\\source\\lib\\three</code>目录下运行<code>git pull</code>即可.</p>\n<h3 id=\"开启并配置-1\"><a href=\"#开启并配置-1\" class=\"headerlink\" title=\"开启并配置\"></a>开启并配置</h3><p>以下三种动态背景只能选一个, 笔者三个都试过之后选了线条, 球面有点精神污染的意思.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">three_waves:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">canvas_lines:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">canvas_sphere:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/五次曲线.gif","slug":"五次曲线.gif","post":"cjgn3ozxu0007acfixr0nxcrr","modified":1,"renderable":0},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/预览博客.png","slug":"预览博客.png","post":"cjgn3ozxv0008acfilkn25ggb","modified":1,"renderable":0},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/部署博客.png","slug":"部署博客.png","post":"cjgn3ozxv0008acfilkn25ggb","modified":1,"renderable":0},{"_id":"source/_posts/2018-04-01-Bresenham/推广后的Bresenham直线算法效果图.png","post":"cjgn3ozw50002acfi7qbdd1kn","slug":"推广后的Bresenham直线算法效果图.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-01-Bresenham/简单版本的Bresenham直线算法效果图.png","post":"cjgn3ozw50002acfi7qbdd1kn","slug":"简单版本的Bresenham直线算法效果图.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/deCasteljau剖分过程.gif","slug":"deCasteljau剖分过程.gif","post":"cjgn3ozxu0007acfixr0nxcrr","modified":1,"renderable":0},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/deCasteljau金字塔.png","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"deCasteljau金字塔.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/decasteljau_john.pdf","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"decasteljau_john.pdf","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/三次曲线.gif","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"三次曲线.gif","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/二次曲线.gif","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"二次曲线.gif","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/四次曲线.gif","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"四次曲线.gif","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-28-Bezier-and-deCasteljau/线性曲线.gif","post":"cjgn3ozxu0007acfixr0nxcrr","slug":"线性曲线.gif","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/为文章默认文件名加上日期前缀.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"为文章默认文件名加上日期前缀.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/侧边栏.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"侧边栏.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/文章末尾.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"文章末尾.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/文章阅读进度条.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"文章阅读进度条.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/注意区分站点配置和主题配置.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"注意区分站点配置和主题配置.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/示例图片.jpg","post":"cjgn3ozxw000aacfilexybk8d","slug":"示例图片.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/网站图标.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"网站图标.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-23-Hexo-and-NexT/网站页脚.png","post":"cjgn3ozxw000aacfilexybk8d","slug":"网站页脚.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/Git右键菜单.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"Git右键菜单.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/Git安装.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"Git安装.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/修改部署配置.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"修改部署配置.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/创建仓库.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"创建仓库.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/创建博客.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"创建博客.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Git安装.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"验证Git安装.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Hexo安装.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"验证Hexo安装.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-04-14-Hexo-GitHub-Pages/验证Node.js环境配置与npm安装.png","post":"cjgn3ozxv0008acfilkn25ggb","slug":"验证Node.js环境配置与npm安装.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjgn3ozvx0000acfirtxhtf3v","tag_id":"cjgn3ozw80003acfi7eqj02gj","_id":"cjgn3ozwb0005acfi5muvtusy"},{"post_id":"cjgn3ozw50002acfi7qbdd1kn","tag_id":"cjgn3ozwa0004acfiaxljf1py","_id":"cjgn3ozwc0006acfil9rchkrs"},{"post_id":"cjgn3ozxu0007acfixr0nxcrr","tag_id":"cjgn3ozwa0004acfiaxljf1py","_id":"cjgn3ozxw0009acfi1rjedkza"},{"post_id":"cjgn3ozxv0008acfilkn25ggb","tag_id":"cjgn3ozw80003acfi7eqj02gj","_id":"cjgn3ozy3000dacfigctz32b8"},{"post_id":"cjgn3ozxv0008acfilkn25ggb","tag_id":"cjgn3ozxz000bacfisuwl7ny5","_id":"cjgn3ozy5000eacfij4zrrlgj"},{"post_id":"cjgn3ozxw000aacfilexybk8d","tag_id":"cjgn3ozw80003acfi7eqj02gj","_id":"cjgn3ozy9000facfiyc60dmby"},{"post_id":"cjgn3ozxw000aacfilexybk8d","tag_id":"cjgn3ozy1000cacfizlevjnoy","_id":"cjgn3ozya000gacfiv10vz0hh"}],"Tag":[{"name":"Hexo","_id":"cjgn3ozw80003acfi7eqj02gj"},{"name":"OpenGL","_id":"cjgn3ozwa0004acfiaxljf1py"},{"name":"Github Pages","_id":"cjgn3ozxz000bacfisuwl7ny5"},{"name":"NexT","_id":"cjgn3ozy1000cacfizlevjnoy"}]}}